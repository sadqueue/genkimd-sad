{"ast":null,"code":"import{ref,push,get,remove,query,orderByKey,limitToLast,orderByChild,set,getDatabase,update}from\"firebase/database\";import{ENV_POINT_TO}from\"./constants\";import{db}from\"./firebaseConfig\";// import { getDatabase, ref, remove } from \"firebase/database\";\n// Fetch all config values from Firebase\nexport const fetchConfigValues=async()=>{const db=getDatabase();const configRef=ref(db,\"config\");try{const snapshot=await get(configRef);if(snapshot.exists()){console.log(\"Config data fetched:\",snapshot.val());// Debug log\nreturn snapshot.val();}else{console.warn(\"No configuration found in Firebase.\");return{};}}catch(error){console.error(\"Error fetching config from Firebase:\",error);return{};}};// Update a single config value in Firebase\nexport const updateConfigValue=async(key,value)=>{const db=getDatabase();const configRef=ref(db,`config/${key}`);try{await set(configRef,value);console.log(`${key} updated successfully.`);}catch(error){console.error(`Error updating ${key}:`,error);}};// Initialize default values if config is empty\nexport const initializeConfigValues=async()=>{const db=getDatabase();const configRef=ref(db,\"config\");try{const snapshot=await get(configRef);if(!snapshot.exists()){const defaultConfig={ALR_5PM:0.6,CLR_5PM:0.4,ALR_7PM:0.7,CLR_7PM:0.3,P95_7PM:180,P95_5PM:180,CONSTANT_COMPOSITE_5PM_N5:0.49,CONSTANT_COMPOSITE_7PM_N1:0.49,CONSTANT_COMPOSITE_7PM_N2:0.59,CONSTANT_COMPOSITE_7PM_N3:0.69,CONSTANT_COMPOSITE_7PM_N4:0.79};await set(configRef,defaultConfig);console.log(\"Initialized default config values.\");}}catch(error){console.error(\"Error initializing config:\",error);}};export const getFirebaseRef=function(startTime){let manuallySetEnv=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";let transactionsRef=\"\";if(manuallySetEnv==\"prod\"||ENV_POINT_TO==\"prod\"){transactionsRef=ref(db,`transactions_${startTime}`);}else{if(ENV_POINT_TO==\"prod\"){transactionsRef=ref(db,`transactions_${startTime}`);}else if(window.location.hostname==='localhost'){transactionsRef=ref(db,`transactions_local_${startTime}`);}else{transactionsRef=ref(db,`transactions_${startTime}`);}}return transactionsRef;};export const getLast10Transactions=async admissionsObj=>{const transactionsRef=getFirebaseRef(admissionsObj.startTime);const transactionsQuery=query(transactionsRef,orderByKey(),limitToLast(10));try{const snapshot=await get(transactionsQuery);if(snapshot.exists()){const data=snapshot.val();return Object.entries(data).map(_ref=>{let[key,value]=_ref;return{id:key,...value};});}else{return[];}}catch(error){console.error(\"Error fetching transactions:\",error);throw error;}};// Function to add a new transaction\nexport const addTransaction=async(admissionsObj,order,copyBox)=>{const transactionsRef=getFirebaseRef(admissionsObj.startTime);try{const getUserDeviceDetails=()=>{return{userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language};};const timestamp=new Date();const month=timestamp.getMonth()+1;// Months are zero-based\nconst day=timestamp.getDate();const year=timestamp.getFullYear();let hours=timestamp.getHours();const minutes=String(timestamp.getMinutes()).padStart(2,'0');const ampm=hours>=12?'PM':'AM';hours=hours%12||12;// Convert 0 to 12 for 12-hour format\nconst localDateTime=`${month}/${day}/${year} ${hours}:${minutes}${ampm}`;const newTransaction={timestamp:timestamp,localDateTime:localDateTime,userDeviceDetails:getUserDeviceDetails(),admissionsObj,order:order?order:\"\",deleted:false// copyBox: copyBox ? copyBox : \"\"\n};// Push the new transaction to the database\nconst newRef=await push(transactionsRef,newTransaction);return{success:true,key:newRef.key};// Return the unique key\n}catch(error){console.error(\"Error adding transaction:\",error);return{success:false,error};}};export const getLast50Transactions=async admissionsObj=>{const transactionsRef=getFirebaseRef(admissionsObj.startTime,\"prod\");const transactionsQuery=query(transactionsRef,orderByKey(),limitToLast(100));try{const snapshot=await get(transactionsQuery);if(snapshot.exists()){const data=snapshot.val();return Object.entries(data).map(_ref2=>{var _value$order,_value$admissionsObj,_value$admissionsObj$;let[key,value]=_ref2;return{id:key,timestamp:value.localDateTime||\"N/A\",orderOfAdmissions:((_value$order=value.order)===null||_value$order===void 0?void 0:_value$order.split(\">\"))||[],shifts:((_value$admissionsObj=value.admissionsObj)===null||_value$admissionsObj===void 0?void 0:(_value$admissionsObj$=_value$admissionsObj.allAdmissionsDataShifts)===null||_value$admissionsObj$===void 0?void 0:_value$admissionsObj$.shifts)||[],deleted:value.deleted||false};}).filter(transaction=>!transaction.deleted);// Properly filter deleted transactions\n}else{return[];}}catch(error){console.error(\"Error fetching transactions:\",error);throw error;}};export const getAllTransactions=async startTime=>{// Reference to the \"5PM\" table in Firebase\nconst transactionsRef=getFirebaseRef(startTime);const transactionsQuery=query(transactionsRef,orderByKey());try{const snapshot=await get(transactionsQuery);if(snapshot.exists()){const data=snapshot.val();return Object.entries(data).map(_ref3=>{var _value$order2,_value$admissionsObj2,_value$admissionsObj3;let[key,value]=_ref3;return{id:key,timestamp:value.localDateTime||\"N/A\",orderOfAdmissions:((_value$order2=value.order)===null||_value$order2===void 0?void 0:_value$order2.split(\">\"))||[],shifts:((_value$admissionsObj2=value.admissionsObj)===null||_value$admissionsObj2===void 0?void 0:(_value$admissionsObj3=_value$admissionsObj2.allAdmissionsDataShifts)===null||_value$admissionsObj3===void 0?void 0:_value$admissionsObj3.shifts)||[]};}).filter(transaction=>!transaction.deleted);// Filter out deleted transactions\n}else{return[];}}catch(error){console.error(\"Error fetching transactions:\",error);throw error;}};export const deleteAllTransactions=async startTime=>{const transactionsRef=getFirebaseRef(startTime);try{await remove(transactionsRef);console.log(\"All transactions deleted successfully!\");}catch(error){console.error(\"Error deleting all transactions:\",error);}};export const deleteTransaction=async(startTime,transactionId)=>{try{let transactionRef=\"\";if(ENV_POINT_TO==\"prod\"){transactionRef=ref(db,`transactions_${startTime}/${transactionId}`);}else if(window.location.hostname==='localhost'){transactionRef=ref(db,`transactions_local_${startTime}/${transactionId}`);}else{transactionRef=ref(db,`transactions_${startTime}/${transactionId}`);}await update(transactionRef,{deleted:true});console.log(`Transaction ${transactionId} marked as deleted.`);}catch(error){console.error(`Error deleting transaction ${transactionId}:`,error);}};export const hardDeleteTransaction=async(startTime,transactionId)=>{try{let transactionRef=\"\";if(ENV_POINT_TO==\"prod\"){transactionRef=ref(db,`transactions_${startTime}/${transactionId}`);}else if(window.location.hostname===\"localhost\"){transactionRef=ref(db,`transactions_local_${startTime}/${transactionId}`);}else{transactionRef=ref(db,`transactions_${startTime}/${transactionId}`);}await remove(transactionRef);// Completely removes the transaction from the database\nconsole.log(`Transaction ${transactionId} has been permanently deleted.`);}catch(error){console.error(`Error deleting transaction ${transactionId}:`,error);}};export const getMostRecentTransaction=async startTime=>{try{const transactionsRef=getFirebaseRef(startTime);const recentQuery=query(transactionsRef,orderByChild(\"timestamp\"),limitToLast(1));const snapshot=await get(recentQuery);if(snapshot&&snapshot.exists()){const data=snapshot.val();const[key,value]=Object.entries(data)[0];return{success:true,transaction:{id:key,...value}};}else{return{success:false,message:\"No transactions found.\"};}}catch(error){console.error(\"Error fetching the most recent transaction:\",error);return{success:false,error};}};export const updateTransaction=async(startTime,transactionId,updatedTransaction)=>{try{let transactionRef=\"\";if(ENV_POINT_TO==\"prod\"){transactionRef=ref(db,`transactions_${startTime}/${transactionId}`);}else if(window.location.hostname==='localhost'){transactionRef=ref(db,`transactions_local_${startTime}/${transactionId}`);}else{transactionRef=ref(db,`transactions_${startTime}/${transactionId}`);}// Remove any properties we don't want to update in Firebase\nconst{deleted,...dataToUpdate}=updatedTransaction;await update(transactionRef,dataToUpdate);console.log(`Transaction ${transactionId} updated successfully.`);return{success:true};}catch(error){console.error(`Error updating transaction ${transactionId}:`,error);throw error;// Rethrow so the UI can handle it\n}};","map":{"version":3,"names":["ref","push","get","remove","query","orderByKey","limitToLast","orderByChild","set","getDatabase","update","ENV_POINT_TO","db","fetchConfigValues","configRef","snapshot","exists","console","log","val","warn","error","updateConfigValue","key","value","initializeConfigValues","defaultConfig","ALR_5PM","CLR_5PM","ALR_7PM","CLR_7PM","P95_7PM","P95_5PM","CONSTANT_COMPOSITE_5PM_N5","CONSTANT_COMPOSITE_7PM_N1","CONSTANT_COMPOSITE_7PM_N2","CONSTANT_COMPOSITE_7PM_N3","CONSTANT_COMPOSITE_7PM_N4","getFirebaseRef","startTime","manuallySetEnv","arguments","length","undefined","transactionsRef","window","location","hostname","getLast10Transactions","admissionsObj","transactionsQuery","data","Object","entries","map","_ref","id","addTransaction","order","copyBox","getUserDeviceDetails","userAgent","navigator","platform","language","timestamp","Date","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","String","getMinutes","padStart","ampm","localDateTime","newTransaction","userDeviceDetails","deleted","newRef","success","getLast50Transactions","_ref2","_value$order","_value$admissionsObj","_value$admissionsObj$","orderOfAdmissions","split","shifts","allAdmissionsDataShifts","filter","transaction","getAllTransactions","_ref3","_value$order2","_value$admissionsObj2","_value$admissionsObj3","deleteAllTransactions","deleteTransaction","transactionId","transactionRef","hardDeleteTransaction","getMostRecentTransaction","recentQuery","message","updateTransaction","updatedTransaction","dataToUpdate"],"sources":["/Users/marikalam/workspace/genkimd-sad/src/transactionsApi.js"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  remove,\n  query,\n  orderByKey,\n  limitToLast,\n  orderByChild,\n  set,\n  getDatabase,\n  update\n} from \"firebase/database\";\nimport { ENV_POINT_TO } from \"./constants\";\nimport { db } from \"./firebaseConfig\";\n// import { getDatabase, ref, remove } from \"firebase/database\";\n\n// Fetch all config values from Firebase\nexport const fetchConfigValues = async () => {\n  const db = getDatabase();\n  const configRef = ref(db, \"config\");\n\n  try {\n    const snapshot = await get(configRef);\n    if (snapshot.exists()) {\n      console.log(\"Config data fetched:\", snapshot.val()); // Debug log\n      return snapshot.val();\n    } else {\n      console.warn(\"No configuration found in Firebase.\");\n      return {};\n    }\n  } catch (error) {\n    console.error(\"Error fetching config from Firebase:\", error);\n    return {};\n  }\n};\n\n// Update a single config value in Firebase\nexport const updateConfigValue = async (key, value) => {\n  const db = getDatabase();\n  const configRef = ref(db, `config/${key}`);\n\n  try {\n    await set(configRef, value);\n    console.log(`${key} updated successfully.`);\n  } catch (error) {\n    console.error(`Error updating ${key}:`, error);\n  }\n};\n\n// Initialize default values if config is empty\nexport const initializeConfigValues = async () => {\n  const db = getDatabase();\n  const configRef = ref(db, \"config\");\n\n  try {\n    const snapshot = await get(configRef);\n    if (!snapshot.exists()) {\n      const defaultConfig = {\n        ALR_5PM: 0.6,\n        CLR_5PM: 0.4,\n        ALR_7PM: 0.7,\n        CLR_7PM: 0.3,\n        P95_7PM: 180,\n        P95_5PM: 180,\n        CONSTANT_COMPOSITE_5PM_N5: 0.49,\n        CONSTANT_COMPOSITE_7PM_N1: 0.49,\n        CONSTANT_COMPOSITE_7PM_N2: 0.59,\n        CONSTANT_COMPOSITE_7PM_N3: 0.69,\n        CONSTANT_COMPOSITE_7PM_N4: 0.79\n      };\n      await set(configRef, defaultConfig);\n      console.log(\"Initialized default config values.\");\n    }\n  } catch (error) {\n    console.error(\"Error initializing config:\", error);\n  }\n};\n\nexport const getFirebaseRef = (startTime, manuallySetEnv = \"\") => {\n  let transactionsRef = \"\";\n\n  if (manuallySetEnv == \"prod\" || ENV_POINT_TO ==\"prod\"){\n    transactionsRef = ref(db, `transactions_${startTime}`);\n  } else {\n    if (ENV_POINT_TO == \"prod\") {\n      transactionsRef = ref(db, `transactions_${startTime}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionsRef = ref(db, `transactions_local_${startTime}`);\n    } else {\n      transactionsRef = ref(db, `transactions_${startTime}`);\n    }\n  }\n  \n  return transactionsRef\n}\nexport const getLast10Transactions = async (admissionsObj) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime);\n  const transactionsQuery = query(transactionsRef, orderByKey(), limitToLast(10));\n\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      return Object.entries(data).map(([key, value]) => ({\n        id: key,\n        ...value,\n      }));\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\n// Function to add a new transaction\nexport const addTransaction = async (admissionsObj, order, copyBox) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime);\n\n  try {\n    const getUserDeviceDetails = () => {\n      return {\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n      };\n    };\n\n    const timestamp = new Date();\n    const month = timestamp.getMonth() + 1; // Months are zero-based\n    const day = timestamp.getDate();\n    const year = timestamp.getFullYear();\n    let hours = timestamp.getHours();\n    const minutes = String(timestamp.getMinutes()).padStart(2, '0');\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12 || 12; // Convert 0 to 12 for 12-hour format\n\n    const localDateTime = `${month}/${day}/${year} ${hours}:${minutes}${ampm}`;\n\n    const newTransaction = {\n      timestamp: timestamp,\n      localDateTime: localDateTime,\n      userDeviceDetails: getUserDeviceDetails(),\n      admissionsObj,\n      order: order ? order : \"\",\n      deleted: false\n      // copyBox: copyBox ? copyBox : \"\"\n    };\n\n    // Push the new transaction to the database\n    const newRef = await push(transactionsRef, newTransaction);\n    return { success: true, key: newRef.key }; // Return the unique key\n  } catch (error) {\n    console.error(\"Error adding transaction:\", error);\n    return { success: false, error };\n  }\n};\n\nexport const getLast50Transactions = async (admissionsObj) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime, \"prod\");\n  const transactionsQuery = query(transactionsRef, orderByKey(), limitToLast(100));\n\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n\n      return Object.entries(data)\n        .map(([key, value]) => ({\n          id: key,\n          timestamp: value.localDateTime || \"N/A\",\n          orderOfAdmissions: value.order?.split(\">\") || [],\n          shifts: value.admissionsObj?.allAdmissionsDataShifts?.shifts || [],\n          deleted: value.deleted || false,\n        }))\n        .filter(transaction => !transaction.deleted); // Properly filter deleted transactions\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\nexport const getAllTransactions = async (startTime) => {\n  // Reference to the \"5PM\" table in Firebase\n  const transactionsRef = getFirebaseRef(startTime);\n  const transactionsQuery = query(transactionsRef, orderByKey());\n\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n\n      return Object.entries(data)\n        .map(([key, value]) => ({\n          id: key,\n          timestamp: value.localDateTime || \"N/A\",\n          orderOfAdmissions: value.order?.split(\">\") || [],\n          shifts: value.admissionsObj?.allAdmissionsDataShifts?.shifts || [],\n        }))\n        .filter(transaction => !transaction.deleted); // Filter out deleted transactions\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\nexport const deleteAllTransactions = async (startTime) => {\n  const transactionsRef = getFirebaseRef(startTime);\n  try {\n    await remove(transactionsRef);\n    console.log(\"All transactions deleted successfully!\");\n  } catch (error) {\n    console.error(\"Error deleting all transactions:\", error);\n  }\n};\n\nexport const deleteTransaction = async (startTime, transactionId) => {\n  try {\n    let transactionRef = \"\";\n\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    await update(transactionRef, { deleted: true });\n    console.log(`Transaction ${transactionId} marked as deleted.`);\n  } catch (error) {\n    console.error(`Error deleting transaction ${transactionId}:`, error);\n  }\n};\n\nexport const hardDeleteTransaction = async (startTime, transactionId) => {\n  try {\n    let transactionRef = \"\";\n\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === \"localhost\") {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    await remove(transactionRef); // Completely removes the transaction from the database\n    console.log(`Transaction ${transactionId} has been permanently deleted.`);\n  } catch (error) {\n    console.error(`Error deleting transaction ${transactionId}:`, error);\n  }\n};\n\nexport const getMostRecentTransaction = async (startTime) => {\n  try {\n    const transactionsRef = getFirebaseRef(startTime);\n    const recentQuery = query(transactionsRef, orderByChild(\"timestamp\"), limitToLast(1));\n\n\n    const snapshot = await get(recentQuery);\n\n\n    if (snapshot && snapshot.exists()) {\n      const data = snapshot.val();\n      const [key, value] = Object.entries(data)[0];\n      return { success: true, transaction: { id: key, ...value } };\n    } else {\n      return { success: false, message: \"No transactions found.\" };\n    }\n  } catch (error) {\n    console.error(\"Error fetching the most recent transaction:\", error);\n    return { success: false, error };\n  }\n};\n\nexport const updateTransaction = async (startTime, transactionId, updatedTransaction) => {\n  try {\n    let transactionRef = \"\";\n\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    // Remove any properties we don't want to update in Firebase\n    const { deleted, ...dataToUpdate } = updatedTransaction;\n\n    await update(transactionRef, dataToUpdate);\n    console.log(`Transaction ${transactionId} updated successfully.`);\n    \n    return { success: true };\n  } catch (error) {\n    console.error(`Error updating transaction ${transactionId}:`, error);\n    throw error; // Rethrow so the UI can handle it\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}