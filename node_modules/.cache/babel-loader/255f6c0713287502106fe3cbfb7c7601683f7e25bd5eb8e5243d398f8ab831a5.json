{"ast":null,"code":"var _jsxFileName = \"/Users/marikalam/workspace/sad/src/HomePage.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { SHIFT_TYPES, START_TIMES, CHRONIC_LOAD_RATIO_THRESHOLD, TIME_FORMAT, ROLE_ORDER, SHOW_ROWS_TABLE, SHOW_ROWS_COPY, CHRONIC_LOAD_RATIO_THRESHOLD_S4, NUMBER_OF_ADMISSIONS_CAP, ROLES_WITH_DEFAULT_TIMES, CONSTANT_COMPOSITE_5PM, CONSTANT_COMPOSITE_7PM, CONSTANT_COMPOSITE_5PM_N5, CONSTANT_COMPOSITE_7PM_N1, CONSTANT_COMPOSITE_7PM_N2, CONSTANT_COMPOSITE_7PM_N3, CONSTANT_COMPOSITE_7PM_N4, P95_7PM, P95_5PM, MINIMIZE_TABLE_STATIC_COMPOSITE_WEB, MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE, ALR_5PM, CLR_5PM, ALR_7PM, CLR_7PM, SHOW_ADMISSIONS_WITH_DETAILS } from \"./constants\";\nimport snapshotImg from \"./images/snapshot.png\";\nimport githublogo from \"./images/github-mark.png\";\nimport emailjs from \"@emailjs/browser\";\nimport CONFIG1 from \"./config\";\nimport CopyMessages from \"./CopyMessages\";\nimport { addTransaction, deleteAllTransactions, getMostRecentTransaction, fetchConfigValues } from \"./transactionsApi\";\nimport html2canvas from \"html2canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst navigate = useNavigate();\nconst auth = getAuth();\nconst handleLogout = async () => {\n  try {\n    await signOut(auth);\n    navigate(\"/\"); // redirect to login\n  } catch (error) {\n    console.error(\"Logout failed:\", error);\n  }\n};\nconst CONFIG = CONFIG1;\nexport function App() {\n  _s();\n  // deleteAllTransactions(\"17:00\")\n  // deleteAllTransactions(\"16:00\")\n  // deleteAllTransactions(\"19:00\")\n  const [allAdmissionsDataShifts, setAllAdmissionsDataShifts] = useState({\n    startTime: \"17:00\",\n    shifts: SHIFT_TYPES\n  });\n  const [seeDetails, setSeeDetails] = useState(false);\n  const [explanation, setExplanation] = useState(\"\");\n  const [openTable, setOpenTable] = useState(false);\n  const [dropdown, setDropdown] = useState(\"17:00\");\n  const [lastSaved, setLastSaved] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [orderOfAdmissions, setOrderOfAdmissions] = useState(\"\");\n  const [array1, setArray1] = useState(\"\");\n  const [array2, setArray2] = useState(\"\");\n  const [clickedGenerateQueue, setClickedGenerateQueue] = useState(false);\n  const [originalAlgorithm, setOriginalAlgorithm] = useState(false);\n  const [show2, setShow2] = useState(false);\n  const [show3, setShow3] = useState(false);\n  const [show4, setShow4] = useState(false);\n  const [config, setConfig] = useState({});\n  const [lastSaved5Pm, setLastSaved5Pm] = useState({});\n  const [doNotStoreInDb, setDoNotStoreInDb] = useState(false);\n  useEffect(() => {\n    emailjs.init(CONFIG.REACT_APP_EMAILJS_PUBLIC_KEY);\n    const loadConfig = async () => {\n      try {\n        const data = await fetchConfigValues();\n        console.log(\"Config values fetched:\", data); // Debugging\n        setConfig(data);\n      } catch (err) {\n        console.log(\"Failed to load configuration.\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadConfig();\n  }, []);\n  useEffect(() => {\n    let localDateTime = \"\";\n    if (Object.keys(config).length === 0) {\n      console.log(\"Config not yet loaded, waiting...\");\n      return;\n    }\n    const fetchRecentTransaction = async () => {\n      function default5PMIfBetween7AMAnd6PM() {\n        const now = new Date();\n        const currentHour = now.getHours();\n        return currentHour >= 7 && currentHour < 18;\n      }\n      const result = await getMostRecentTransaction(default5PMIfBetween7AMAnd6PM() ? \"17:00\" : \"19:00\");\n      if (result.success) {\n        setLastSaved(result.transaction.localDateTime);\n        if (result.transaction.admissionsObj.allAdmissionsDataShifts && result.transaction.admissionsObj.allAdmissionsDataShifts.shifts) {\n          setDropdown(result.transaction.admissionsObj.startTime);\n          sortMain(result.transaction.admissionsObj.allAdmissionsDataShifts, result.transaction.admissionsObj.startTime ? result.transaction.admissionsObj.startTime : \"17:00\", localDateTime);\n        }\n        setOrderOfAdmissions(result.transaction.order);\n        const splitOrderOfAdmissions = orderString => {\n          const parts = orderString.split(\">\").map(item => item.split(\"(\")[0]); // Extract only the shift names\n          const firstN1Index = parts.indexOf(\"N1\");\n          const secondN1Index = parts.indexOf(\"N1\", firstN1Index + 1);\n          if (secondN1Index !== -1) {\n            return [parts.slice(0, secondN1Index),\n            // First array from start to second \"N1\"\n            parts.slice(secondN1Index) // Second array from second \"N1\" to end\n            ];\n          } else {\n            return [parts, []]; // If no second \"N1\", return everything as first array\n          }\n        };\n        const orderString = result.transaction.order;\n        const [array1x, array2x] = splitOrderOfAdmissions(orderString);\n        setArray1(array1x);\n        setArray2(array2x);\n      } else {\n        sortMain(allAdmissionsDataShifts, default5PMIfBetween7AMAnd6PM() ? \"17:00\" : \"19:00\", localDateTime);\n      }\n    };\n    fetchRecentTransaction();\n    const fetchRecent5PMTransaction = async () => {\n      const result = await getMostRecentTransaction(\"17:00\");\n      if (result.success) {\n        setLastSaved5Pm(result.transaction.admissionsObj.allAdmissionsDataShifts);\n      }\n    };\n    fetchRecent5PMTransaction();\n  }, [config]);\n  const isXIn2Hours = each => {\n    let isXIn2Hours = false;\n    if (dropdown == \"19:00\") {\n      lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n        if (each.name == fivePm.name) {\n          if (fivePm.numberOfAdmissions !== \"\" && Number(fivePm.numberOfAdmissions) + 2 == Number(each.numberOfAdmissions)) {\n            isXIn2Hours = true;\n            return true;\n          }\n        }\n      });\n    }\n    return isXIn2Hours;\n  };\n  const is3In2Hours = each => {\n    let is3In2Hours = false;\n    if (dropdown == \"19:00\") {\n      lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n        if (each.name == fivePm.name) {\n          if (fivePm.numberOfAdmissions !== \"\" && Number(fivePm.numberOfAdmissions) + 3 <= Number(each.numberOfAdmissions)) {\n            is3In2Hours = true;\n            return true;\n          }\n        }\n      });\n    }\n    return is3In2Hours;\n  };\n  const getXIn2Hours = each => {\n    let isXIn2Hours = \"\";\n    if (dropdown == \"19:00\") {\n      if (each.name == \"N5\" && each.numberOfAdmissions >= 2) {\n        return each.numberOfAdmissions;\n      } else {\n        lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n          if (each.name == fivePm.name) {\n            if (fivePm.numberOfAdmissions !== \"\" && Number(fivePm.numberOfAdmissions) + 2 <= Number(each.numberOfAdmissions)) {\n              isXIn2Hours = Number(each.numberOfAdmissions) - Number(fivePm.numberOfAdmissions);\n              return true;\n            }\n          }\n        });\n      }\n    }\n    return isXIn2Hours;\n  };\n  const sortMainOriginal = (timeObj, dropdownSelected, lastSavedTime = \"\") => {\n    const orderOfAdmissions = [];\n    timeObj && timeObj.shifts && timeObj.shifts && timeObj.shifts.forEach((each, eachIndex) => {\n      each[\"startTime\"] = timeObj.startTime ? timeObj.startTime : \"\";\n      each[\"minutesWorkedFromStartTime\"] = getMinutesWorkedFromStartTime(each);\n      each[\"numberOfHoursWorked\"] = getNumberOfHoursWorked(each);\n      each[\"chronicLoadRatio\"] = getChronicLoadRatio(each);\n      each[\"numberOfAdmissions\"] = each.numberOfAdmissions ? each.numberOfAdmissions : \"\";\n      each[\"timestamp\"] = each.timestamp ? each.timestamp : \"\";\n      return each;\n    });\n    const explanationArr = [];\n    explanationArr.push(\"Step 1: Rank Order Based on Acute Load (Time Since Last Admission). [ALR = 1 - (Current Time [17:00] - Last Admit Time)/config.P95_7PM]\");\n\n    /*\n    Step 1: Step 1: Sort based on timestamp. If timestamp is the same, sort by chronic load ratio\n    */\n    const newObject = JSON.parse(JSON.stringify(timeObj));\n    if (newObject.shifts) {\n      newObject.shifts.map((each, eachIndex) => {\n        if (ROLES_WITH_DEFAULT_TIMES[dropdownSelected] && ROLES_WITH_DEFAULT_TIMES[dropdownSelected].includes(each.name)) {\n          each.timestamp = each.timestampDefault;\n        }\n        return each;\n      });\n\n      /* sort by timestamp. if timestamp is the same, sort by chronic load */\n      newObject && newObject.shifts && newObject.shifts.sort((a, b) => {\n        // Compare timestamps first\n        if (a.timestamp < b.timestamp) return -1;\n        if (a.timestamp > b.timestamp) return 1;\n\n        // If timestamps are equal, compare chronicLoadRatio\n        if (a.chronicLoadRatio < b.chronicLoadRatio) return -1;\n        if (a.chronicLoadRatio > b.chronicLoadRatio) return 1;\n\n        // If timestamps are equal, compare chronicLoadRatio\n        if (a.numberOfAdmissions < b.numberOfAdmissions) return -1;\n        if (a.numberOfAdmissions > b.numberOfAdmissions) return 1;\n        return 0; // If both are equal\n      });\n      //if same chronic load ratio, then pick the one with lower number of admissions to go first\n      newObject.shifts && newObject.shifts.forEach((each, eachIndex) => {\n        if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n          explanationArr.push(getFormattedOutput(each));\n        }\n      });\n      /*\n      Step 2: For each admitter, if chronic load ratio is >0.67, then deprioritize in the order \n      (either putting in back or pushing back by X spots depending on how great the ratio is)\n      */\n      const shiftsLessThanThreshold = [];\n      const shiftsGreaterThanThreshold = [];\n      explanationArr.push(\"\\n\");\n      explanationArr.push(`Step 2: De-prioritize Admitters with High Chronic Load (Admits/Hours Worked)`);\n      newObject.shifts && newObject.shifts.forEach((each, eachIndex) => {\n        if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n          if (dropdownSelected == \"17:00\" && each.name === \"S4\" && dropdown == \"19:00\" && each.chronicLoadRatio > CHRONIC_LOAD_RATIO_THRESHOLD_S4 || !window.Cypress && isXIn2Hours(each) || dropdown == \"19:00\" && each.chronicLoadRatio > CHRONIC_LOAD_RATIO_THRESHOLD) {\n            // explanationArr.push(getFormattedOutput(each));\n            explanationArr.push(`${each.name}: (${each.numberOfAdmissions ? each.numberOfAdmissions : \" \"}/${each.numberOfHoursWorked})=${each.chronicLoadRatio}`);\n            shiftsGreaterThanThreshold.push(each);\n          } else {\n            shiftsLessThanThreshold.push(each);\n          }\n        }\n      });\n\n      /* Step 3: De-prioritize admitters with high chronic load to the back of the queue */\n      explanationArr.push(\"\\n\");\n      explanationArr.push(`Step 3: De-prioritize admitters with high chronic load to the back of the queue.`);\n      let shiftsCombined = shiftsLessThanThreshold.concat(shiftsGreaterThanThreshold);\n      shiftsCombined.forEach((each, eachIndex) => {\n        explanationArr.push(getFormattedOutput(each));\n      });\n\n      /* Step 4: Remove roles with number of admissions greater than 7 */\n      explanationArr.push(\"\\n\");\n      explanationArr.push(`Step 4: Remove high-admission roles.`);\n      shiftsCombined.forEach((each, eachIndex) => {\n        if (dropdown == \"17:00\") {\n          explanationArr.push(getFormattedOutput(each) + \" (DONE)\");\n        } else if (dropdown == \"19:00\") {\n          if (each.numberOfAdmissions > NUMBER_OF_ADMISSIONS_CAP) {\n            explanationArr.push(getFormattedOutput(each) + \" (DONE)\");\n          }\n        }\n      });\n\n      /* Step 5: High chronic load scenarios */\n      // explanationArr.push(\"\\n\");\n      let scenario1 = false;\n      let scenario2 = false;\n      let scenario3 = false;\n      if (timeObj.startTime == \"19:00\") {\n        shiftsCombined.forEach((each, eachIndex) => {\n          /* Scenario 1: \n          // If S3 has 6 admissions,\n          // S4 has 6 admissions or\n          // N5 has 3+ admissions */\n          if (each.name == \"S3\" && Number(each.numberOfAdmissions) == 6 || each.name == \"S4\" && Number(each.numberOfAdmissions) == 6 || each.name == \"N5\" && Number(each.numberOfAdmissions) >= 3 && each.name == \"N5\" && Number(each.numberOfAdmissions) <= 6) {\n            scenario1 = true;\n            return;\n            /* Scenario 2: If S4 has 5 admissions */\n          } else if (each.name == \"S4\" && Number(each.numberOfAdmissions) == 5) {\n            scenario1 = false;\n            scenario2 = true;\n            return;\n            //If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4 “Insert after N1 in Array2”\n          }\n          /*else if (each.name == \"S3\" && Number(each.numberOfAdmissions) == 5){\n              explanationArr.push(`Step 5: If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4`);\n              scenario3 = true;\n              return;\n          }*/\n        });\n      }\n      if (scenario1) {\n        explanationArr.push(\"Step 5 (Scenario 1): 7PM High Chronic Load Scenario. If S3 or S4 has number of admission of 6 or N5 has number of admissions of 3+, then repeat (N1-N4)x2 and then insert at the end.\");\n\n        /* Step 1: Remove from Array 1. This means that we have to copy Array 1 to Array 2.*/\n        const array1 = [];\n        const array2 = [];\n        let s4HasFiveAdmissions = false;\n        let s4HasFiveAdmissions_obj = {};\n        shiftsCombined.forEach((innerEach, innerEachIndex) => {\n          if (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5) {\n            s4HasFiveAdmissions = true;\n            s4HasFiveAdmissions_obj = innerEach;\n          }\n        });\n        shiftsCombined.forEach((innerEach, innerEachIndex) => {\n          if (dropdown == \"17:00\") {\n            if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {} else {\n              array2.push(innerEach);\n            }\n          } else if (dropdown == \"19:00\") {\n            if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6 || Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else {\n              array2.push(innerEach);\n            }\n          }\n        });\n        if (s4HasFiveAdmissions) {\n          let index = array2.findIndex(obj => obj.name === \"S4\");\n          if (index !== -1) {\n            let [removed] = array2.splice(index, 1);\n            array2.splice(2, 0, removed);\n          }\n        }\n        shiftsCombined.forEach((innerEach, innerEachIndex) => {\n          if (dropdown == \"17:00\") {\n            if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5 || innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3) {\n              explanationArr.push(getFormattedOutput(innerEach));\n            } else {\n              array1.push(innerEach);\n            }\n          } else if (dropdown == \"19:00\") {\n            if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5 || innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3 || Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n              explanationArr.push(getFormattedOutput(innerEach));\n            } else {\n              array1.push(innerEach);\n            }\n          }\n        });\n\n        /* Step 2: Create Array 2 but copying over from Array 1*/\n        shiftsCombined = array1.concat(array2);\n        setArray1(array1 && array1.map(each => {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          } else {\n            return each.name;\n          }\n        }));\n        setArray2(array2 && array2.map(each => {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          } else {\n            return each.name;\n          }\n        }));\n        const combinedArr = array1.concat(array2);\n        shiftsCombined = combinedArr;\n      } else if (scenario2) {\n        explanationArr.push(\"Step 5 (Scenario 2): 7PM High Chronic Load Scenario. If S4 has number of admissions of 5, then N1-N4, N1>N2>S4>N3>N4\");\n\n        /* If S4 has number of admissions of 5, then remove S4 from Array 1. This means that we have to copy Array 1 to Array 2. */\n        const array1 = [];\n        const array2 = [];\n        let getS4 = {};\n        shiftsCombined.forEach((innerEach, innerEachIndex) => {\n          if (dropdown == \"17:00\") {\n            if (innerEach.name == \"S4\") {\n              explanationArr.push(getFormattedOutput(innerEach));\n              getS4 = innerEach;\n            } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n              array1.push(innerEach);\n            } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n              array2.push(innerEach);\n            } else {\n              array1.push(innerEach);\n              array2.push(innerEach);\n            }\n          } else if (dropdown == \"19:00\") {\n            if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else if (innerEach.name == \"S4\") {\n              explanationArr.push(getFormattedOutput(innerEach));\n              getS4 = innerEach;\n            } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n              array1.push(innerEach);\n            } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n              array2.push(innerEach);\n            } else {\n              array1.push(innerEach);\n              array2.push(innerEach);\n            }\n          }\n        });\n        const newElement = getS4;\n        let index = 0;\n        for (let i = 0; i < array2.length; i++) {\n          if (array2[i].name == \"N2\") {\n            index = i;\n          }\n        }\n        if (index !== -1) {\n          // Insert the new element after the found element\n          array2.splice(index + 1, 0, newElement);\n        }\n\n        // N5 is inserted after N4, if S4 qualifies then S4 inserted After N4, if S3 qualifies then S3 inserted after N4 \n\n        const combinedArr = array1.concat(array2);\n        shiftsCombined = combinedArr;\n        setArray1(array1 && array1.map(each => {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          } else {\n            return each.name;\n          }\n        }));\n        setArray2(array2 && array2.map(each => {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          } else {\n            return each.name;\n          }\n        }));\n      } else if (scenario3) {\n        const array1 = [];\n        let getS3 = {};\n        shiftsCombined.forEach((innerEach, innerEachIndex) => {\n          if (dropdown == \"17:00\") {\n            if (innerEach.name == \"S3\") {\n              getS3 = innerEach;\n            } else {\n              array1.push(innerEach);\n            }\n          } else if (dropdown == \"19:00\") {\n            if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else if (innerEach.name == \"S3\") {\n              getS3 = innerEach;\n            } else {\n              array1.push(innerEach);\n            }\n          }\n        });\n        const array2 = [];\n        const copyArray2 = [...array1];\n        copyArray2.forEach((innerEach, innerEachIndex) => {\n          if (dropdown == \"17:00\") {\n            if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {} else {\n              array2.push(innerEach);\n            }\n          } else if (dropdown == \"19:00\") {\n            if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6 || Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else {\n              array2.push(innerEach);\n            }\n          }\n        });\n        const newElement = getS3;\n        let index = 0;\n        for (let i = 0; i < array2.length; i++) {\n          if (array2[i].name == \"N1\") {\n            index = i;\n          }\n        }\n        if (index !== -1) {\n          // Insert the new element after the found element\n          array2.splice(index + 1, 0, newElement);\n        }\n        setArray1(array1 && array1.map(each => {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          } else {\n            return each.name;\n          }\n        }));\n        setArray2(array2 && array2.map(each => {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          } else {\n            return each.name;\n          }\n        }));\n        const combinedArr = array1.concat(array2);\n        shiftsCombined = combinedArr;\n      }\n      shiftsCombined.map((each, eachIndex) => {\n        if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n          if (dropdown == \"17:00\") {\n            if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n              orderOfAdmissions.push(`${each.name}(${each.chronicLoadRatio})`);\n            } else {\n              orderOfAdmissions.push(each.name);\n            }\n          } else if (dropdown == \"19:00\") {\n            if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n              if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n                orderOfAdmissions.push(`${each.name}(${each.chronicLoadRatio})`);\n              } else {\n                orderOfAdmissions.push(each.name);\n              }\n            }\n          }\n        }\n      });\n      setOrderOfAdmissions(orderOfAdmissions.join(\">\"));\n      setExplanation(explanationArr);\n      setSortRoles(timeObj, dropdownSelected, lastSavedTime);\n      setAllAdmissionsDataShifts(timeObj);\n      sortByAscendingName(timeObj);\n    }\n    return orderOfAdmissions.join(\">\");\n  };\n  const sortMain = (timeObj, dropdownSelected, lastSavedTime = \"\") => {\n    if (originalAlgorithm) {\n      return sortMainOriginal(timeObj, dropdownSelected, lastSavedTime);\n    }\n    return sortMainByCompositeScoreStatic(timeObj, dropdownSelected, lastSavedTime);\n  };\n  const sortMainByCompositeScoreStatic = (timeObj, dropdownSelected, lastSavedTime = \"\") => {\n    const orderOfAdmissions = [];\n    timeObj && timeObj.shifts && timeObj.shifts && timeObj.shifts.map((each, eachIndex) => {\n      if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n        return each;\n      } else {\n        each[\"timestamp\"] = \"\";\n        each[\"numberOfAdmissions\"] = \"\";\n      }\n      return each;\n    });\n    timeObj && timeObj.shifts && timeObj.shifts && timeObj.shifts.forEach((each, eachIndex) => {\n      each[\"startTime\"] = timeObj.startTime ? timeObj.startTime : \"\";\n      each[\"minutesWorkedFromStartTime\"] = getMinutesWorkedFromStartTime(each);\n      each[\"numberOfHoursWorked\"] = getNumberOfHoursWorked(each);\n      each[\"chronicLoadRatio\"] = getChronicLoadRatio(each);\n      each[\"numberOfAdmissions\"] = each.numberOfAdmissions ? each.numberOfAdmissions : \"\";\n      each[\"timestamp\"] = each.timestamp ? each.timestamp : \"\";\n      return each;\n    });\n    const explanationArr = [];\n    const differenceArr = [];\n    const alrArr = [];\n    const clrArr = [];\n    const compositeArr = [];\n    const normalizedAlrExplanation = [];\n    const normalizedClrExplanation = [];\n    const compositeArrExplanation = [];\n    const getAlrExplanation = (each, alrx) => {\n      if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n        let p95 = \"\";\n        if (dropdownSelected == \"19:00\") {\n          p95 = config.P95_7PM;\n        } else if (dropdownSelected == \"17:00\") {\n          p95 = config.P95_5PM;\n        }\n        let fixedDiff = each.difference;\n        if (each.difference > p95) {\n          fixedDiff = p95;\n        }\n        return `${each.name}: ${alrx}`;\n      }\n    };\n    const getClrExplanation = (each, clrx) => {\n      if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n        const admissions = Number(each.numberOfAdmissions);\n        let clr = Number(clrx);\n        let str = \"\";\n        if (dropdownSelected == \"19:00\") {\n          if (each.name == \"S2\") {\n            str = `${each.name}: ${admissions} / 8 = ${clr.toFixed(3)}`;\n          } else if (each.name == \"S3\") {\n            str = `${each.name}: ${admissions} / 6 = ${clr.toFixed(3)}`;\n          } else if (each.name == \"S4\") {\n            str = `${each.name}: ${admissions} / 5 = ${clr.toFixed(3)}`;\n          } else if (each.name == \"N5\") {\n            str = `${each.name}: ${admissions} / 2 = ${clr.toFixed(3)}`;\n          }\n          return str;\n        } else if (dropdownSelected == \"17:00\") {\n          if (each.name == \"S1\") {\n            str = `${each.name}: ${admissions} / 7 = ${clr.toFixed(3)}`;\n          } else if (each.name == \"S2\") {\n            str = `${each.name}: ${admissions} / 6 = ${clr.toFixed(3)}`;\n          } else if (each.name == \"S3\") {\n            str = `${each.name}: ${admissions} / 4 = ${clr.toFixed(3)}`;\n          } else if (each.name == \"S4\") {\n            str = `${each.name}: ${admissions} / 3 = ${clr.toFixed(3)}`;\n          }\n          return str;\n        }\n      }\n    };\n    const getCompositeExplanation = (each, normalizedAlr, normalizedClr, isFinalExplanation) => {\n      const alr_f = dropdownSelected == \"17:00\" ? config.ALR_5PM : config.ALR_7PM;\n      const clr_f = dropdownSelected == \"17:00\" ? config.CLR_5PM : config.CLR_7PM;\n      let res = (alr_f * Number(normalizedAlr) + clr_f * Number(normalizedClr)).toFixed(3);\n      if (dropdownSelected == \"17:00\") {\n        if (each.name == \"N5\") {\n          res = config.CONSTANT_COMPOSITE_5PM_N5;\n          return `${each.name}: ${config.CONSTANT_COMPOSITE_5PM_N5}`;\n        }\n      } else if (dropdownSelected == \"19:00\") {\n        if (each.name == \"N1\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N1;\n          return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N1}`;\n        } else if (each.name == \"N2\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N2;\n          return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N2}`;\n        } else if (each.name == \"N3\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N3;\n          return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N3}`;\n        } else if (each.name == \"N4\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N4;\n          return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N4}`;\n        }\n      }\n      if (isFinalExplanation) {\n        return `${each.name}: ${res}`;\n      } else {\n        if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n          return `${each.name}: (${alr_f} * ${normalizedAlr}) + (${clr_f} * ${normalizedClr}) = ${res}`;\n        }\n      }\n    };\n    const getNormalizedAlrExplanation = each => {\n      if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n        let p95_alr = \"\";\n        if (dropdownSelected == \"17:00\") {\n          p95_alr = 1.00;\n        } else if (dropdownSelected == \"19:00\") {\n          p95_alr = 1.00;\n        }\n        return `${each.name}: ${each.alr} / ${p95_alr} = ${each.normalizedAlr}`;\n      }\n    };\n    const getNormalizedClrExplanation = each => {\n      if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n        let p95_clr = \"\";\n        if (dropdownSelected == \"17:00\") {\n          p95_clr = 1.00;\n        } else if (dropdownSelected == \"19:00\") {\n          p95_clr = 1.00;\n        }\n        return `${each.name}: ${each.clr} / ${p95_clr} = ${each.normalizedClr}`;\n      }\n    };\n    explanationArr.push(\"Step 1: Calculate Acute Load for each Role.\");\n    const getAlrx = (each, difference) => {\n      if (dropdownSelected == \"19:00\" && each.name == \"N5\" && Number(each.numberOfAdmissions) == 0) {\n        return 0;\n      }\n      let p95 = \"\";\n      if (dropdownSelected == \"19:00\") {\n        p95 = config.P95_7PM;\n      } else if (dropdownSelected == \"17:00\") {\n        p95 = config.P95_5PM;\n      }\n      let fixedDiff = difference;\n      if (difference > p95) {\n        fixedDiff = p95;\n      }\n      let increaseAlr = 0;\n      if (!window.Cypress && dropdownSelected == \"19:00\") {\n        if (each.name == \"N5\" && each.numberOfAdmissions > 1) {\n          increaseAlr = Number(each.numberOfAdmissions) - 1;\n        } else {\n          lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n            if (each.name == fivePm.name) {\n              if (fivePm.numberOfAdmissions !== \"\" && Number(fivePm.numberOfAdmissions) + 2 <= Number(each.numberOfAdmissions)) {\n                increaseAlr = Number(each.numberOfAdmissions) - Number(fivePm.numberOfAdmissions) - 1;\n              }\n            }\n          });\n        }\n      }\n      const originalAlr = Number(1 - fixedDiff / p95);\n      const updatedAlr = originalAlr + increaseAlr;\n      return updatedAlr.toFixed(3);\n    };\n    const getClrx = each => {\n      if (dropdownSelected == \"19:00\" && each.name == \"N5\" && Number(each.numberOfAdmissions) == 0) {\n        return 0;\n      }\n      const admissions = Number(each.numberOfAdmissions);\n      let clr = 0;\n      if (dropdownSelected == \"19:00\") {\n        if (each.name == \"S2\") {\n          clr = Number(admissions) / 8;\n        } else if (each.name == \"S3\") {\n          clr = Number(admissions) / 6;\n        } else if (each.name == \"S4\") {\n          clr = Number(admissions) / 5;\n        } else if (each.name == \"N5\") {\n          clr = Number(admissions) / 2;\n        }\n        return clr.toFixed(3);\n      } else if (dropdownSelected == \"17:00\") {\n        if (each.name == \"S1\") {\n          clr = Number(admissions) / 7;\n        } else if (each.name == \"S2\") {\n          clr = Number(admissions) / 6;\n        } else if (each.name == \"S3\") {\n          clr = Number(admissions) / 4;\n        } else if (each.name == \"S4\") {\n          clr = Number(admissions) / 3;\n        }\n        return clr.toFixed(3);\n      }\n    };\n    const getCompositex = (each, normalizedAlr, normalizedClr) => {\n      const alr_f = dropdownSelected == \"17:00\" ? config.ALR_5PM : config.ALR_7PM;\n      const clr_f = dropdownSelected == \"17:00\" ? config.CLR_5PM : config.CLR_7PM;\n      let res = (alr_f * Number(normalizedAlr) + clr_f * Number(normalizedClr)).toFixed(3);\n      if (dropdownSelected == \"17:00\") {\n        if (each.name == \"N5\") {\n          res = config.CONSTANT_COMPOSITE_5PM_N5;\n          return config.CONSTANT_COMPOSITE_5PM_N5;\n        }\n      } else if (dropdownSelected == \"19:00\") {\n        if (each.name == \"N1\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N1;\n          return config.CONSTANT_COMPOSITE_7PM_N1;\n        } else if (each.name == \"N2\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N2;\n          return config.CONSTANT_COMPOSITE_7PM_N2;\n        } else if (each.name == \"N3\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N3;\n          return config.CONSTANT_COMPOSITE_7PM_N3;\n        } else if (each.name == \"N4\") {\n          res = config.CONSTANT_COMPOSITE_7PM_N4;\n          return config.CONSTANT_COMPOSITE_7PM_N4;\n        }\n      }\n      return Number(res).toFixed(3);\n    };\n    const getNormalizedAlrx = (each, alrx) => {\n      let p95_alr = \"\";\n      if (dropdownSelected == \"17:00\") {\n        p95_alr = 1.00;\n      } else if (dropdownSelected == \"19:00\") {\n        p95_alr = 1.00;\n      }\n      const normalizedAlr = Number(alrx) / p95_alr;\n      return Number(normalizedAlr).toFixed(3);\n    };\n    const getNormalizedClrx = (each, clrx) => {\n      let p95_clr = \"\";\n      if (dropdownSelected == \"17:00\") {\n        p95_clr = 1.00;\n      } else if (dropdownSelected == \"19:00\") {\n        p95_clr = 1.00;\n      }\n      const normalizedAlr = clrx / p95_clr;\n      return Number(normalizedAlr).toFixed(3);\n    };\n    const getTimeDifferencex = time1 => {\n      if (time1) {\n        const time2 = dropdownSelected;\n        // Convert times to minutes\n        const [hours1, minutes1] = time1.split(':').map(Number);\n        const [hours2, minutes2] = time2.split(':').map(Number);\n        const totalMinutes1 = hours1 * 60 + minutes1;\n        const totalMinutes2 = hours2 * 60 + minutes2;\n\n        // Calculate difference in minutes\n        let diffMinutes = totalMinutes2 - totalMinutes1;\n        return diffMinutes;\n      } else {\n        return 0;\n      }\n    };\n    timeObj.shifts.forEach((each, eachIndex) => {\n      if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n        const difference = getTimeDifferencex(each.timestamp);\n        const alrx = getAlrx(each, difference);\n        const clrx = getClrx(each);\n        const normalizedAlr = getNormalizedAlrx(each, alrx);\n        const normalizedClr = getNormalizedClrx(each, clrx);\n        const composite = getCompositex(each, normalizedAlr, normalizedClr);\n        each[\"difference\"] = difference;\n        each[\"alr\"] = alrx;\n        each[\"clr\"] = clrx;\n        each[\"composite\"] = composite;\n        each[\"normalizedAlr\"] = normalizedAlr;\n        each[\"normalizedClr\"] = normalizedClr;\n        compositeArrExplanation.push(getCompositeExplanation(each, normalizedAlr, normalizedClr));\n        alrArr.push(getAlrExplanation(each, alrx));\n        clrArr.push(getClrExplanation(each, clrx));\n        normalizedAlrExplanation.push(getNormalizedAlrExplanation(each));\n        normalizedClrExplanation.push(getNormalizedClrExplanation(each));\n      }\n    });\n\n    /*\n    Step 1: Time Difference\n    */\n    timeObj.shifts.sort((a, b) => {\n      if (a.difference > b.difference) {\n        return 1;\n      }\n      if (a.difference < b.difference) {\n        return -1;\n      }\n      return 0;\n    });\n    timeObj.shifts.sort((a, b) => {\n      if (a.composite < b.composite) {\n        return -1;\n      }\n      if (b.composite > b.composite) {\n        return 1;\n      }\n      return 0;\n    });\n\n    // explanationArr.push(`ALR = 1 - (Minutes Before The Hour/ P95)`);\n\n    alrArr.map((each, eachIndex) => {\n      explanationArr.push(each);\n    });\n    explanationArr.push(\"\\n\");\n    explanationArr.push(`Step 2: Calculate Chronic Load for each Role.`);\n    explanationArr.push(\"CLR = Number of Admits / Hours Worked So Far\");\n    clrArr.map((each, eachIndex) => {\n      explanationArr.push(each);\n    });\n\n    // explanationArr.push(\"\\n\")\n    // explanationArr.push(`Step 3: Calculate Normalized ALR.`);\n\n    // normalizedAlrExplanation.map((each, eachIndex) => {\n    //     explanationArr.push(each);\n    // });\n\n    // explanationArr.push(\"\\n\")\n    // explanationArr.push(`Step 4: Calculate Normalized CLR.`);\n\n    // normalizedClrExplanation.map((each, eachIndex) => {\n    //     explanationArr.push(each);\n    // });\n\n    explanationArr.push(\"\\n\");\n    explanationArr.push(`Step 3: Calculate Composite Score.`);\n    compositeArrExplanation.forEach((each, eachIndex) => {\n      // explanationArr.push(each);\n    });\n    timeObj.shifts.sort((a, b) => {\n      if (Number(a.composite) > Number(b.composite)) {\n        return 1;\n      }\n      if (Number(a.composite) < Number(b.composite)) {\n        return -1;\n      }\n      return 0;\n    });\n    explanationArr.push(\"\\n\");\n    explanationArr.push(\"Step 4: Generate the Order, with Roles having the Lowest Composite Score Prioritized First.\");\n    timeObj.shifts.forEach((each, eachIndex) => {\n      if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n        explanationArr.push(`${each.name}: ${each.composite}`);\n      }\n    });\n    const lessThan2Hours = [];\n    const greaterThan2Hours = [];\n    let hasAnyGreaterThan2Hours = false;\n    timeObj.shifts.forEach((each, eachIndex) => {\n      if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n        if (dropdownSelected == \"19:00\" && !window.Cypress && isXIn2Hours(each) || dropdownSelected == \"19:00\" && each.chronicLoadRatio > CHRONIC_LOAD_RATIO_THRESHOLD_S4) {\n          greaterThan2Hours.push(each);\n          hasAnyGreaterThan2Hours = true;\n        } else {\n          lessThan2Hours.push(each);\n        }\n      }\n    });\n    greaterThan2Hours.sort((a, b) => {\n      if (a.composite > b.composite) {\n        return 1;\n      } else if (a.composite < b.composite) {\n        return -1;\n      }\n      return 0;\n    });\n\n    // if (hasAnyGreaterThan2Hours) {\n    //     explanationArr.push(\"\\n\")\n    //     explanationArr.push(\"Step 7: Check if any roles have had 2 or more admissions in the last 2 hours. Then sort by composite score.\");\n    //     greaterThan2Hours && greaterThan2Hours.forEach((each) => {\n    //         explanationArr.push(`${each.name}: had ${getXIn2Hours(each)} admissions in the last 2 hours /  Composite Score: ${each.composite}`);\n    //     })\n    // }\n\n    let shiftsCombined = lessThan2Hours.concat(greaterThan2Hours);\n    let scenario1 = false;\n    let scenario2 = false;\n    let scenario3 = false;\n    if (timeObj.startTime == \"19:00\") {\n      shiftsCombined.forEach((each, eachIndex) => {\n        /* Scenario 1: \n        // If S3 has 6 admissions,\n        // S4 has 6 admissions or\n        // N5 has 3+ admissions */\n        if (each.name == \"S3\" && Number(each.numberOfAdmissions) == 6 || each.name == \"S4\" && Number(each.numberOfAdmissions) == 6 || each.name == \"N5\" && Number(each.numberOfAdmissions) >= 3 && each.name == \"N5\" && Number(each.numberOfAdmissions) <= 6) {\n          scenario1 = true;\n          return;\n          /* Scenario 2: If S4 has 5 admissions */\n        } else if (each.name == \"S4\" && Number(each.numberOfAdmissions) == 5) {\n          scenario1 = false;\n          scenario2 = true;\n          return;\n          //If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4 “Insert after N1 in Array2”\n        }\n        /*else if (each.name == \"S3\" && Number(each.numberOfAdmissions) == 5){\n            explanationArr.push(`Step 5: If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4`);\n            scenario3 = true;\n            return;\n        }*/\n      });\n    }\n    if (scenario1) {\n      // explanationArr.push(\"\\n\");\n      // explanationArr.push(\"7PM High Chronic Load Scenario. If S3 or S4 has number of admission of 6 or N5 has number of admissions of 3+, then repeat (N1-N4)x2 and then insert at the end.\");\n\n      /* Step 1: Remove from Array 1. This means that we have to copy Array 1 to Array 2.*/\n      const array1 = [];\n      const array2 = [];\n      let s4HasFiveAdmissions = false;\n      let s4HasFiveAdmissions_obj = {};\n      shiftsCombined.forEach((innerEach, innerEachIndex) => {\n        if (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5) {\n          s4HasFiveAdmissions = true;\n          s4HasFiveAdmissions_obj = innerEach;\n        }\n      });\n      shiftsCombined.forEach((innerEach, innerEachIndex) => {\n        if (dropdownSelected == \"17:00\") {\n          if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {} else {\n            array2.push(innerEach);\n          }\n        } else if (dropdownSelected == \"19:00\") {\n          if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6 || Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else {\n            array2.push(innerEach);\n          }\n        }\n      });\n      if (s4HasFiveAdmissions) {\n        let index = array2.findIndex(obj => obj.name === \"S4\");\n        if (index !== -1) {\n          let [removed] = array2.splice(index, 1);\n          array2.splice(2, 0, removed);\n        }\n      }\n      shiftsCombined.forEach((innerEach, innerEachIndex) => {\n        if (dropdownSelected == \"17:00\") {\n          if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5 || innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3) {\n            // explanationArr.push(getFormattedOutputCompositeScore2(innerEach));\n          } else {\n            array1.push(innerEach);\n          }\n        } else if (dropdownSelected == \"19:00\") {\n          if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6 || innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5 || innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3 || is3In2Hours(innerEach) || Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n            // explanationArr.push(getFormattedOutputCompositeScore2(innerEach));\n          } else {\n            array1.push(innerEach);\n          }\n        }\n      });\n\n      /* Step 2: Create Array 2 but copying over from Array 1*/\n      // shiftsCombined = array1.concat(array2);\n\n      setArray1(array1 && array1.map(each => {\n        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n          return each.name;\n          // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n        } else {\n          return each.name;\n        }\n      }));\n      setArray2(array2 && array2.map(each => {\n        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n          // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n          return each.name;\n        } else {\n          return each.name;\n        }\n      }));\n      const combinedArr = array1.concat(array2);\n      shiftsCombined = combinedArr;\n    } else if (scenario2) {\n      // explanationArr.push(\"\\n\");\n      // explanationArr.push(\"7PM High Chronic Load Scenario. If S4 has number of admissions of 5, then N1-N4, N1>N2>S4>N3>N4\");\n\n      /* If S4 has number of admissions of 5, then remove S4 from Array 1. This means that we have to copy Array 1 to Array 2. */\n      const array1 = [];\n      const array2 = [];\n      let getS4 = {};\n      shiftsCombined.forEach((innerEach, innerEachIndex) => {\n        if (dropdownSelected == \"17:00\") {\n          if (innerEach.name == \"S4\") {\n            // explanationArr.push(getFormattedOutputCompositeScore2(innerEach))\n            getS4 = innerEach;\n          } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n            array1.push(innerEach);\n          } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n            array2.push(innerEach);\n          } else {\n            array1.push(innerEach);\n            array2.push(innerEach);\n          }\n        } else if (dropdownSelected == \"19:00\") {\n          if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else if (innerEach.name == \"S4\") {\n            // explanationArr.push(getFormattedOutputCompositeScore2(innerEach))\n            getS4 = innerEach;\n          } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n            array1.push(innerEach);\n          } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n            array2.push(innerEach);\n          } else {\n            array1.push(innerEach);\n            array2.push(innerEach);\n          }\n        }\n      });\n      const newElement = getS4;\n      let index = 0;\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i].name == \"N2\") {\n          index = i;\n        }\n      }\n      if (index !== -1) {\n        // Insert the new element after the found element\n        array2.splice(index + 1, 0, newElement);\n      }\n\n      // N5 is inserted after N4, if S4 qualifies then S4 inserted After N4, if S3 qualifies then S3 inserted after N4 \n\n      const combinedArr = array1.concat(array2);\n      shiftsCombined = combinedArr;\n      setArray1(array1 && array1.map(each => {\n        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n          return each.name;\n          // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n        } else {\n          return each.name;\n        }\n      }));\n      setArray2(array2 && array2.map(each => {\n        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n          return each.name;\n          // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n        } else {\n          return each.name;\n        }\n      }));\n    } else if (scenario3) {\n      // explanationArr.push(\"\\n\");\n      const array1 = [];\n      let getS3 = {};\n      shiftsCombined.forEach((innerEach, innerEachIndex) => {\n        if (dropdownSelected == \"17:00\") {\n          if (innerEach.name == \"S3\") {\n            getS3 = innerEach;\n          } else {\n            array1.push(innerEach);\n          }\n        } else if (dropdownSelected == \"19:00\") {\n          if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else if (innerEach.name == \"S3\") {\n            getS3 = innerEach;\n          } else {\n            array1.push(innerEach);\n          }\n        }\n      });\n      const array2 = [];\n      const copyArray2 = [...array1];\n      copyArray2.forEach((innerEach, innerEachIndex) => {\n        if (dropdownSelected == \"17:00\") {\n          if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {} else {\n            array2.push(innerEach);\n          }\n        } else if (dropdownSelected == \"19:00\") {\n          if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6 || Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {} else {\n            array2.push(innerEach);\n          }\n        }\n      });\n      const newElement = getS3;\n      let index = 0;\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i].name == \"N1\") {\n          index = i;\n        }\n      }\n      if (index !== -1) {\n        // Insert the new element after the found element\n        array2.splice(index + 1, 0, newElement);\n      }\n      setArray1(array1 && array1.map(each => {\n        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n          return each.name;\n          // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n        } else {\n          return each.name;\n        }\n      }));\n      setArray2(array2 && array2.map(each => {\n        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n          return each.name;\n          // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n        } else {\n          return each.name;\n        }\n      }));\n      const combinedArr = array1.concat(array2);\n      shiftsCombined = combinedArr;\n    }\n    shiftsCombined.map((each, eachIndex) => {\n      if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n        if (dropdownSelected == \"17:00\") {\n          if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n            orderOfAdmissions.push(each.name);\n            // orderOfAdmissions.push(`${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`)\n          } else {\n            orderOfAdmissions.push(each.name);\n          }\n        } else if (dropdownSelected == \"19:00\") {\n          if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n            if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n              orderOfAdmissions.push(each.name);\n              // orderOfAdmissions.push(`${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`)\n            } else {\n              orderOfAdmissions.push(each.name);\n            }\n          }\n        }\n      }\n    });\n    if (shiftsCombined && shiftsCombined.length == 0) {\n      shiftsCombined = timeObj.shifts;\n    }\n    setOrderOfAdmissions(orderOfAdmissions.join(\">\"));\n    setExplanation(explanationArr);\n    setSortRoles(timeObj, dropdownSelected, lastSavedTime);\n    setAllAdmissionsDataShifts(timeObj);\n    sortByAscendingName(timeObj);\n    return orderOfAdmissions.join(\">\");\n  };\n  const getFormattedOutput = each => {\n    return `${each.name} [ ${each.timestamp ? moment(each.timestamp, TIME_FORMAT).format(TIME_FORMAT) : \"--:-- --\"} ] (${each.numberOfAdmissions ? each.numberOfAdmissions : \" \"}/${each.numberOfHoursWorked})=${each.chronicLoadRatio}`;\n  };\n  const getMomentTimeWithoutUndefined = time => {\n    return time ? moment(time, TIME_FORMAT).format(TIME_FORMAT) : \"--:-- --\";\n  };\n  const convertTo12HourFormatSimple = time24 => {\n    const [hours] = time24 && time24.split(':').map(Number);\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const hours12 = hours % 12 || 12;\n    return `${hours12}:00${period}`;\n  };\n  const onChange = (e, admissionsId) => {\n    if (dropdown == \"17:00\") {\n      setClickedGenerateQueue(false);\n    }\n    const {\n      name,\n      value\n    } = e.target;\n    const newObj = {};\n    const updatedShifts = allAdmissionsDataShifts && allAdmissionsDataShifts.shifts && allAdmissionsDataShifts.shifts.map(item => item.admissionsId === admissionsId && name ? {\n      ...item,\n      [name]: value\n    } : item);\n    updatedShifts.map((each, eachIndex) => {\n      const timeDiff = getTimeDifference(each.timestamp);\n      ;\n      each[\"startTime\"] = dropdown;\n      each[\"minutesWorkedFromStartTime\"] = getMinutesWorkedFromStartTime(each);\n      each[\"numberOfHoursWorked\"] = getNumberOfHoursWorked(each);\n      each[\"chronicLoadRatio\"] = getChronicLoadRatio(each);\n      each[\"difference\"] = timeDiff;\n      each[\"alr\"] = getAlr(each, each.difference);\n      each[\"clr\"] = getClr(each);\n      each[\"normalizedAlr\"] = getNormalizedAlr(each, each.alr);\n      each[\"normalizedClr\"] = getNormalizedClr(each, each.clr);\n      each[\"composite\"] = getComposite(each, each.normalizedAlr, each.normalizedClr);\n      return each;\n    });\n    newObj[\"startTime\"] = dropdown;\n    newObj[\"shifts\"] = updatedShifts ? updatedShifts : [];\n    setAllAdmissionsDataShifts(newObj);\n  };\n  const getChronicLoadRatio = admission => {\n    const timeDifference = admission.numberOfHoursWorked;\n    const chronicLoadRatio = (Number(admission.numberOfAdmissions) / Number(timeDifference)).toFixed(2);\n    if (chronicLoadRatio == \"NaN\" || chronicLoadRatio == \"Infinity\") {\n      return \"0.00\";\n    } else {\n      return chronicLoadRatio ? chronicLoadRatio : \"\";\n    }\n  };\n  const getTimeDifference = time1 => {\n    if (time1) {\n      const time2 = dropdown;\n      // Convert times to minutes\n      const [hours1, minutes1] = time1.split(':').map(Number);\n      const [hours2, minutes2] = time2.split(':').map(Number);\n      const totalMinutes1 = hours1 * 60 + minutes1;\n      const totalMinutes2 = hours2 * 60 + minutes2;\n\n      // Calculate difference in minutes\n      let diffMinutes = totalMinutes2 - totalMinutes1;\n      return diffMinutes;\n    } else {\n      return 0;\n    }\n  };\n  const getAlr = (each, difference) => {\n    let p95 = \"\";\n    if (dropdown == \"19:00\") {\n      p95 = config.P95_7PM;\n    } else if (dropdown == \"17:00\") {\n      p95 = config.P95_5PM;\n    }\n    let fixedDiff = difference;\n    if (difference > p95) {\n      fixedDiff = p95;\n    }\n    let increaseAlr = 0;\n    if (!window.Cypress && dropdown == \"19:00\") {\n      if (each.name == \"N5\" && each.numberOfAdmissions > 1) {\n        increaseAlr = Number(each.numberOfAdmissions) - 1;\n      } else {\n        lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n          if (each.name == fivePm.name) {\n            if (fivePm.numberOfAdmissions !== \"\" && Number(fivePm.numberOfAdmissions) + 2 <= Number(each.numberOfAdmissions)) {\n              increaseAlr = Number(each.numberOfAdmissions) - Number(fivePm.numberOfAdmissions) - 1;\n            }\n          }\n        });\n      }\n    }\n    const originalAlr = Number(1 - fixedDiff / p95);\n    const updatedAlr = originalAlr + increaseAlr;\n    return updatedAlr.toFixed(3);\n  };\n  const getClr = each => {\n    const admissions = Number(each.numberOfAdmissions);\n    let clr = 0;\n    if (dropdown == \"19:00\") {\n      if (each.name == \"S2\") {\n        clr = Number(admissions) / 8;\n      } else if (each.name == \"S3\") {\n        clr = Number(admissions) / 6;\n      } else if (each.name == \"S4\") {\n        clr = Number(admissions) / 5;\n      } else if (each.name == \"N5\") {\n        clr = Number(admissions) / 2;\n      }\n      return clr.toFixed(3);\n    } else if (dropdown == \"17:00\") {\n      if (each.name == \"S1\") {\n        clr = Number(admissions) / 7;\n      } else if (each.name == \"S2\") {\n        clr = Number(admissions) / 6;\n      } else if (each.name == \"S3\") {\n        clr = Number(admissions) / 4;\n      } else if (each.name == \"S4\") {\n        clr = Number(admissions) / 3;\n      }\n      return clr.toFixed(3);\n    }\n  };\n  const getComposite = (each, normalizedAlr, normalizedClr, dropdownSelected) => {\n    const alr_f = dropdownSelected == \"17:00\" ? config.ALR_5PM : config.ALR_7PM;\n    const clr_f = dropdownSelected == \"17:00\" ? config.CLR_5PM : config.CLR_7PM;\n    let res = (alr_f * Number(normalizedAlr) + clr_f * Number(normalizedClr)).toFixed(3);\n    if (dropdown == \"17:00\") {\n      if (each.name == \"N5\") {\n        res = config.CONSTANT_COMPOSITE_5PM_N5;\n        return config.CONSTANT_COMPOSITE_5PM_N5;\n      }\n    } else if (dropdown == \"19:00\") {\n      if (each.name == \"N1\") {\n        res = config.CONSTANT_COMPOSITE_7PM_N1;\n        return config.CONSTANT_COMPOSITE_7PM_N1;\n      } else if (each.name == \"N2\") {\n        res = config.CONSTANT_COMPOSITE_7PM_N2;\n        return config.CONSTANT_COMPOSITE_7PM_N2;\n      } else if (each.name == \"N3\") {\n        res = config.CONSTANT_COMPOSITE_7PM_N3;\n        return config.CONSTANT_COMPOSITE_7PM_N3;\n      } else if (each.name == \"N4\") {\n        res = config.CONSTANT_COMPOSITE_7PM_N4;\n        return config.CONSTANT_COMPOSITE_7PM_N4;\n      }\n    }\n    return Number(res).toFixed(3);\n  };\n  const getNormalizedAlr = (each, alrx) => {\n    let p95_alr = \"\";\n    if (dropdown == \"17:00\") {\n      p95_alr = 1.00;\n    } else if (dropdown == \"19:00\") {\n      p95_alr = 1.00;\n    }\n    const normalizedAlr = Number(alrx) / p95_alr;\n    return Number(normalizedAlr).toFixed(3);\n  };\n  const getNormalizedClr = (each, clrx) => {\n    let p95_clr = \"\";\n    if (dropdown == \"17:00\") {\n      p95_clr = 1.00;\n    } else if (dropdown == \"19:00\") {\n      p95_clr = 1.00;\n    }\n    const normalizedAlr = clrx / p95_clr;\n    return Number(normalizedAlr).toFixed(3);\n  };\n  const getNumberOfHoursWorked = admission => {\n    let startTime = \"\";\n    SHIFT_TYPES.forEach((shift, shiftIndex) => {\n      if (shift.name === admission.name) {\n        startTime = shift.start;\n      }\n    });\n    const now = admission.startTime;\n    const timeDifference = moment(now, TIME_FORMAT).diff(moment(startTime, TIME_FORMAT), \"hours\", true).toFixed();\n    return timeDifference ? timeDifference : \"\";\n  };\n  const getMinutesWorkedFromStartTime = admission => {\n    const now = getMomentTimeWithoutUndefined(admission.startTime);\n    const timeDifference = moment(now, TIME_FORMAT).diff(moment(admission.timestamp, TIME_FORMAT), \"minutes\", true).toFixed();\n    return timeDifference ? timeDifference : \"\";\n  };\n  const timesDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: dropdown,\n      name: \"timesdropdown\",\n      className: isMobileDevice() ? \"timesdropdownwithoutsnapshot\" : \"timesdropdown\",\n      id: \"timesdropdown\",\n      onChange: e => {\n        const startTime = e.target.value;\n        if (startTime == \"19:00\" && clickedGenerateQueue) {\n          const getMostRecentTransactionx = async startTime => {\n            const res = await getMostRecentTransaction(startTime);\n            if (!res.success) {\n              const newObj = {};\n              newObj[\"startTime\"] = \"19:00\";\n              newObj[\"shifts\"] = SHIFT_TYPES;\n              setDropdown(\"19:00\");\n              sortMain(newObj, \"19:00\");\n            } else if (res && res.transaction) {\n              let getN5 = {};\n              res.transaction.admissionsObj.allAdmissionsDataShifts.shifts.forEach((each, eachIndex) => {\n                if (each.name == \"N5\") {\n                  getN5 = each;\n                  return;\n                }\n              });\n              const newObj = {};\n              const shifts = [];\n              allAdmissionsDataShifts.shifts.forEach((each, eachIndex) => {\n                if (each.name == \"N5\") {\n                  each = getN5;\n                }\n                shifts.push(each);\n              });\n              newObj[\"startTime\"] = \"19:00\";\n              newObj[\"shifts\"] = shifts;\n              setDropdown(\"19:00\");\n              // setAllAdmissionsDataShifts(newObj);\n              sortMain(newObj, \"19:00\");\n              // setLastSaved(\"\")\n            }\n          };\n          getMostRecentTransactionx(\"19:00\");\n        } else {\n          setClickedGenerateQueue(false);\n          setDropdown(startTime);\n          setLastSaved(\"\");\n          setAllAdmissionsDataShifts({\n            shifts: SHIFT_TYPES,\n            dropdown: startTime\n          });\n          const getMostRecentTransactionx = async startTime => {\n            const res = await getMostRecentTransaction(startTime);\n            if (res && res.transaction) {\n              const order = res.transaction.order;\n              const allAdmissionsDataShiftsx = res.transaction.admissionsObj.allAdmissionsDataShifts;\n              const lastSavedTime = res.transaction.localDateTime;\n              // if (allAdmissionsDataShiftsx) {\n              //     setAllAdmissionsDataShifts(allAdmissionsDataShiftsx);\n              // }\n\n              if (order.split(\">\").length > 10) {\n                const splitArr = order.split(\">\");\n                function splitArrayAtSecondOccurrence(arr, value) {\n                  let count = 0;\n                  let splitIndex = -1;\n                  for (let i = 0; i < arr.length; i++) {\n                    if (arr[i] === value) {\n                      count++;\n                      if (count === 2) {\n                        splitIndex = i;\n                        break;\n                      }\n                    }\n                  }\n                  if (splitIndex !== -1) {\n                    setArray1(arr.slice(0, splitIndex));\n                    setArray2(arr.slice(splitIndex));\n                    return [arr.slice(0, splitIndex), arr.slice(splitIndex)];\n                  } else {\n                    return [arr];\n                  }\n                }\n                setOrderOfAdmissions(order);\n                splitArrayAtSecondOccurrence(splitArr, \"N1\");\n              } else if (order) {\n                setOrderOfAdmissions(order);\n              }\n              if (lastSavedTime) {\n                setLastSaved(lastSavedTime);\n              }\n              // setSortRoles(allAdmissionsDataShiftsx, startTime, lastSavedTime);\n              sortMain(allAdmissionsDataShiftsx, startTime);\n            }\n          };\n          getMostRecentTransactionx(startTime);\n        }\n      },\n      children: START_TIMES.map((startTime, startTimeIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: `${startTime.value}`,\n          children: `${startTime.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1718,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1610,\n      columnNumber: 13\n    }, this);\n  };\n  const sortByAscendingName = admissionsDatax => {\n    const returnObjShifts = admissionsDatax.shifts.sort((a, b) => {\n      return ROLE_ORDER.indexOf(a.name) - ROLE_ORDER.indexOf(b.name);\n    });\n    let returnObj = {};\n    returnObj.startTime = admissionsDatax.startTime;\n    returnObj.shifts = returnObjShifts;\n    setAllAdmissionsDataShifts(returnObj);\n  };\n  const isMobileDevice = () => {\n    if (/Mobi|Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent)) {\n      // console.log(\"User is on a phone or tablet.\");\n      return true;\n    } else {\n      // console.log(\"User is on a desktop.\");\n      return false;\n    }\n  };\n  const takeScreenshot = async () => {\n    const element = document.getElementById(\"screenshotimg\");\n\n    // Capture the div as a canvas\n    const canvas = await html2canvas(element);\n\n    // Convert the canvas to a Blob\n    canvas.toBlob(async blob => {\n      if (!blob) {\n        alert('Failed to capture the screenshot.');\n        return;\n      }\n\n      // Copy the Blob to the clipboard\n      try {\n        const clipboardItem = new ClipboardItem({\n          'image/png': blob\n        });\n        await navigator.clipboard.write([clipboardItem]);\n        alert('✅ Screenshot copied to clipboard!');\n      } catch (err) {\n        console.error('Failed to copy the screenshot to the clipboard:', err);\n        alert('Failed to copy the screenshot. Check your browser permissions.');\n      }\n    });\n  };\n  const setSortRoles = (admissionsDatax, dropdownSelected, lastSavedTime = \"\") => {\n    const sortRoles = [];\n    let sortRolesNameOnly = [];\n    let timeObjShifts = admissionsDatax.shifts;\n\n    //sort by name\n    const customOrder = [\"DA\", \"S1\", \"S2\", \"S3\", \"S4\", \"N5\", \"N1\", \"N2\", \"N3\", \"N4\"];\n\n    // Sort the data based on the custom order\n    timeObjShifts && Array.isArray(timeObjShifts) && timeObjShifts.sort((a, b) => {\n      const indexA = customOrder.indexOf(a.name);\n      const indexB = customOrder.indexOf(b.name);\n\n      // If the names are not in the custom order, move them to the end\n      return (indexA !== -1 ? indexA : Infinity) - (indexB !== -1 ? indexB : Infinity);\n    });\n\n    // let sevenPmS4greaterThanCap = false;\n    timeObjShifts && Array.isArray(timeObjShifts) && timeObjShifts.forEach((each, eachIndex) => {\n      if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n        if (dropdown == \"17:00\") {\n          if (each.numberOfHoursWorked + \"\" !== \"0\") {\n            sortRoles.push(getFormattedOutput(each));\n          }\n          if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n            sortRolesNameOnly.push(`${each.name}(${each.chronicLoadRatio})`);\n          }\n        } else if (dropdown == \"19:00\") {\n          if (each.numberOfHoursWorked + \"\" !== \"0\") {\n            if (Number(each.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n              sortRoles.push(getFormattedOutput(each) + \" (DONE)\");\n            } else {\n              sortRoles.push(getFormattedOutput(each));\n            }\n          }\n          if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n            if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n              sortRolesNameOnly.push(`${each.name}(${each.chronicLoadRatio})`);\n            } else {\n              sortRolesNameOnly.push(each.name);\n            }\n          }\n        }\n      }\n    });\n    sortRoles.push(`${sortRolesNameOnly.join(\">\")}`);\n    return timeObjShifts;\n  };\n  const handleGenerateQueue = async e => {\n    setClickedGenerateQueue(true);\n    const orderOfAdmissions_ = sortMain(allAdmissionsDataShifts, dropdown);\n    if (!doNotStoreInDb) {\n      try {\n        // Wait for addTransaction to complete before fetching the recent transaction\n        await addTransaction({\n          allAdmissionsDataShifts,\n          startTime: dropdown\n        }, orderOfAdmissions_);\n\n        // Now fetch the most recent transaction\n        const result = await getMostRecentTransaction(dropdown);\n\n        // console.log(\"recent transaction\", result);\n        if (result.success) {\n          setLastSaved(result.transaction.localDateTime);\n          setAllAdmissionsDataShifts(allAdmissionsDataShifts);\n          setDropdown(dropdown);\n          if (dropdown === \"17:00\") {\n            setLastSaved5Pm(result.transaction.admissionsObj.allAdmissionsDataShifts);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error generating queue:\", error);\n      }\n    }\n  };\n  const handleKeyDown = (e, rowIndex) => {\n    const data = allAdmissionsDataShifts.shifts;\n    if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      if (rowIndex < data.length - 1) {\n        const getInputById = document.getElementById(`${e.target.name}_${rowIndex + 1}`);\n        if (getInputById) {\n          getInputById.focus();\n        }\n      }\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault(); // Prevent the default action (scrolling)\n      // Move to the previous row\n      if (rowIndex > 0) {\n        const getInputById = document.getElementById(`${e.target.name}_${rowIndex - 1}`);\n        if (getInputById) {\n          getInputById.focus();\n        }\n      }\n    } else if (e.target.name == \"numberOfAdmissions\" && e.key === \"ArrowLeft\") {\n      const getElementById = document.getElementById(`timestamp_${rowIndex}`);\n      if (getElementById) {\n        getElementById.focus();\n      }\n    } else if (e.target.name == \"timestamp\" && e.key === \"ArrowRight\") {\n      const getElementById = document.getElementById(`numberOfAdmissions_${rowIndex}`);\n      if (getElementById) {\n        getElementById.focus();\n      }\n    }\n  };\n  function hasTwoOccurrences(str, target) {\n    // Split the string by the target substring and check if there are more than 2 parts\n    const parts = str.split(target);\n    return parts.length > 2;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-5xl font-bold text-center tracking-widest leading-tight\",\n        children: \"S.A.D.Q\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1908,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-lg mt-2\",\n        children: \"Standardized Admissions Distribution Queue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1911,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"subtitle\",\n        children: \"Standardized Admissions Distribution Queue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1914,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-900 text-white py-6 px-4 relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"absolute right-4 top-4 bg-red-500 text-white px-4 py-1 rounded hover:bg-red-600\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1916,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-5xl font-bold text-center tracking-widest\",\n          children: \"S.A.D.Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1922,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-lg mt-2\",\n          children: \"Standardized Admissions Distribution Queue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1923,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1915,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1906,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rect1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1930,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rect2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1931,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rect3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1932,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rect4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1933,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rect5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1934,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1928,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1927,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-container-just1item\",\n        children: timesDropdown()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1938,\n        columnNumber: 21\n      }, this), !isMobileDevice() && /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"copy button\",\n        className: \"copybutton\",\n        id: \"snapshot-button\",\n        src: snapshotImg,\n        onClick: ev => {\n          takeScreenshot();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1941,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setOpenTable(!openTable),\n        className: \"expand\",\n        children: openTable ? \"Minimize Table ⬆️\" : \"Expand Table ⬇️\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1950,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        id: \"screenshotimg\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"reacttable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: openTable ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: MINIMIZE_TABLE_STATIC_COMPOSITE_WEB.map((each, eachIndex) => {\n                if (each[0] == \"name\") {\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th_10percent\",\n                    children: each[1]\n                  }, eachIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1965,\n                    columnNumber: 53\n                  }, this);\n                } else if (each[0] == \"timestamp\" || each[0] == \"numberOfAdmissions\" || each[0] == \"chronicLoadRatio\") {\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th_25percent\",\n                    children: each[1]\n                  }, eachIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1969,\n                    columnNumber: 53\n                  }, this);\n                }\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: each[1]\n                }, eachIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1972,\n                  columnNumber: 53\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1961,\n              columnNumber: 37\n            }, this) : isMobileDevice() ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE.map((each, eachIndex) => {\n                if (each[0] == \"name\") {\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th_10percent\",\n                    children: each[1]\n                  }, eachIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1980,\n                    columnNumber: 53\n                  }, this);\n                } else if (each[0] == \"timestamp\" || each[0] == \"numberOfAdmissions\" || each[0] == \"chronicLoadRatio\") {\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th_25percent\",\n                    children: each[1]\n                  }, eachIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1984,\n                    columnNumber: 53\n                  }, this);\n                }\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: each[1]\n                }, eachIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1987,\n                  columnNumber: 53\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1976,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE.map((each, eachIndex) => {\n                if (each[0] == \"name\") {\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th_10percent\",\n                    children: each[1]\n                  }, eachIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1995,\n                    columnNumber: 53\n                  }, this);\n                } else if (each[0] == \"timestamp\" || each[0] == \"numberOfAdmissions\" || each[0] == \"chronicLoadRatio\") {\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th_25percent\",\n                    children: each[1]\n                  }, eachIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1999,\n                    columnNumber: 53\n                  }, this);\n                }\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: each[1]\n                }, eachIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2002,\n                  columnNumber: 53\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1991,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1959,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: allAdmissionsDataShifts.shifts && allAdmissionsDataShifts.shifts.length > 0 && allAdmissionsDataShifts.shifts.map((admission, indexx) => {\n              let index = 0;\n              if (SHOW_ROWS_TABLE[dropdown] && SHOW_ROWS_TABLE[dropdown].includes(admission.name)) {\n                index = SHOW_ROWS_TABLE[dropdown].findIndex(user => user == admission.name);\n                return !admission.isStatic && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  style: SHOW_ROWS_TABLE[dropdown] && SHOW_ROWS_TABLE[dropdown].includes(admission.name) ? {} : {\n                    display: \"none\"\n                  },\n                  id: \"admissionsDataRow_\" + index,\n                  className: \"admissionsDataRow\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      name: `name_${index}`,\n                      className: \"bold-fields\",\n                      value: admission.name || \"\",\n                      type: \"text\",\n                      disabled: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2023,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2022,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"usercanedit\",\n                    tabIndex: -1,\n                    onKeyDown: e => handleKeyDown(e, index),\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      id: `timestamp_${index}`,\n                      name: \"timestamp\",\n                      className: \"timestamp\",\n                      value: admission.timestamp || \"\",\n                      type: \"time\",\n                      onChange: e => onChange(e, admission.admissionsId),\n                      disabled: admission.isStatic\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2031,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2030,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"usercanedit cell-with-number\",\n                    tabIndex: -1,\n                    onKeyDown: e => handleKeyDown(e, index),\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"small-number\",\n                      children: getXIn2Hours(admission)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2042,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      id: `numberOfAdmissions_${index}`,\n                      name: \"numberOfAdmissions\",\n                      className: \"numberOfAdmissions\",\n                      value: admission.numberOfAdmissions || \"\",\n                      step: \"1\",\n                      type: \"number\",\n                      placeholder: \"---\",\n                      onChange: e => onChange(e, admission.admissionsId),\n                      disabled: admission.isStatic,\n                      inputMode: \"numeric\",\n                      pattern: \"[0-9]*\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2043,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2041,\n                    columnNumber: 57\n                  }, this), openTable && /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"backgroundlightgray\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"progress-cell\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"progress-container\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"progress-bar\",\n                          style: {\n                            width: `${(admission.normalizedAlr || 0) * 100}%`,\n                            background: (admission.normalizedAlr || 0) > 0.5 ? \"linear-gradient(to right, #800000, #800000)\" /* Red gradient */ : \"linear-gradient(to right, #800000, #800000)\" /* Green gradient */\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2061,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2060,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"progress-text\",\n                        children: admission.normalizedAlr ? Number(admission.normalizedAlr).toFixed(2) : \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2071,\n                        columnNumber: 69\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2059,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2058,\n                    columnNumber: 61\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"backgroundlightgray\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"progress-cell\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"progress-container\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"progress-bar\",\n                          style: {\n                            width: `${(admission.clr || 0) * 100}%`,\n                            background: (admission.clr || 0) > 0.5 ? \"linear-gradient(to right, #1a0dab, #1a0dab)\" /* Red gradient */ : \"linear-gradient(to right,  #1a0dab, #1a0dab)\" /* Green gradient */\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2080,\n                          columnNumber: 69\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2079,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"progress-text\",\n                        children: openTable ? Number(admission.clr).toFixed(2) : `${Math.round((admission.clr || 0) * 100)}%`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2090,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2078,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2077,\n                    columnNumber: 58\n                  }, this), false && openTable && /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      name: \"numberHoursWorked\",\n                      value: admission.numberOfHoursWorked || \"\",\n                      type: \"number\",\n                      placeholder: \"Enter number\",\n                      disabled: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2097,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2096,\n                    columnNumber: 61\n                  }, this), openTable && /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"backgroundlightgray\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"progress-cell\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"progress-container\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"progress-bar\",\n                          style: {\n                            width: `${(admission.composite || 0) * 100}%`,\n                            background: (admission.composite || 0) > 0.5 ? \"linear-gradient(to right, #1a0dab, #1a0dab)\" /* Red gradient */ : \"linear-gradient(to right,  #1a0dab, #1a0dab)\" /* Green gradient */\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2110,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2109,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"progress-text\",\n                        children: admission.composite ? Number(admission.composite).toFixed(2) : \"\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2120,\n                        columnNumber: 69\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2108,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2107,\n                    columnNumber: 61\n                  }, this)]\n                }, admission.admissionsId, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2016,\n                  columnNumber: 53\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2007,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1958,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"endoutputcenter\",\n          id: \"orderofadmissions_title\",\n          children: `Order of Admits ${lastSaved}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2132,\n          columnNumber: 25\n        }, this), window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS && originalAlgorithm ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"endoutputcenter\",\n          id: \"orderofadmissions_output\",\n          children: orderOfAdmissions && orderOfAdmissions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2134,\n          columnNumber: 29\n        }, this) : hasTwoOccurrences(orderOfAdmissions, \"N1\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"endoutputcenter\",\n            id: \"orderofadmissions_output\",\n            children: [array1 ? `(${array1.join(\">\")})¹` : \"\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2139,\n              columnNumber: 138\n            }, this), array2 && `(${array2.join(\">\")})ⁿ`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2139,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2138,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"endoutputcenter\",\n          id: \"orderofadmissions_output\",\n          children: orderOfAdmissions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2141,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lastsaved-yellowmessage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2143,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1956,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"generateQueue\",\n          onClick: e => {\n            handleGenerateQueue(e);\n            if (\"vibrate\" in navigator) {\n              navigator.vibrate(200);\n            }\n          },\n          children: \"Generate Queue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2151,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2150,\n        columnNumber: 21\n      }, this), seeDetails && /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"notes\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"bold\",\n          children: \"Explanation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2172,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"explanation\",\n          onClick: () => {\n            setShow2(!show2);\n          },\n          children: !show2 ? \"> Step by Step\" : \"< Step by Step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2178,\n          columnNumber: 82\n        }, this), show2 && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stepbystepdetails\",\n          children: [explanation && explanation.map((line, lineIndex) => {\n            if (line == \"\\n\") {\n              return /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2183,\n                columnNumber: 44\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"p\", {\n                children: line\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2185,\n                columnNumber: 44\n              }, this);\n            }\n          }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2187,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2180,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"doNotStoreInDb\",\n          placeholder: \"Generate Queue without Storing in Database\",\n          className: \"input-left\",\n          label: \"\",\n          type: \"checkbox\",\n          onChange: e => {\n            setDoNotStoreInDb(e.target.checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2190,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"originalAlgorithm\",\n          children: \"Generate Queue without Storing in Database\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2200,\n          columnNumber: 37\n        }, this), show4 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"originalAlgorithmCheckbox\",\n              placeholder: \"Original Algorithm\",\n              className: \"input-left\",\n              label: \"\",\n              type: \"checkbox\",\n              onChange: e => {\n                setOriginalAlgorithm(e.target.checked);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2222,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"originalAlgorithm\",\n              children: \"Original Algorithm v1.0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2232,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2221,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2219,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2171,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2240,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"footer-text\",\n          children: [\"\\xA9 \", new Date().getFullYear(), \" Genki MD LLC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2249,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"footer-text\",\n          children: \"All rights reserved. Licensed use only.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2250,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"footer-text\",\n          children: \"This tool is for workflow support only. Providers are responsible for final admission and care decisions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2251,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2241,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1937,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1905,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"zZ9fkan1jlhB/Q5/owAjnpZtT3I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","moment","SHIFT_TYPES","START_TIMES","CHRONIC_LOAD_RATIO_THRESHOLD","TIME_FORMAT","ROLE_ORDER","SHOW_ROWS_TABLE","SHOW_ROWS_COPY","CHRONIC_LOAD_RATIO_THRESHOLD_S4","NUMBER_OF_ADMISSIONS_CAP","ROLES_WITH_DEFAULT_TIMES","CONSTANT_COMPOSITE_5PM","CONSTANT_COMPOSITE_7PM","CONSTANT_COMPOSITE_5PM_N5","CONSTANT_COMPOSITE_7PM_N1","CONSTANT_COMPOSITE_7PM_N2","CONSTANT_COMPOSITE_7PM_N3","CONSTANT_COMPOSITE_7PM_N4","P95_7PM","P95_5PM","MINIMIZE_TABLE_STATIC_COMPOSITE_WEB","MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE","ALR_5PM","CLR_5PM","ALR_7PM","CLR_7PM","SHOW_ADMISSIONS_WITH_DETAILS","snapshotImg","githublogo","emailjs","CONFIG1","CopyMessages","addTransaction","deleteAllTransactions","getMostRecentTransaction","fetchConfigValues","html2canvas","jsxDEV","_jsxDEV","navigate","useNavigate","auth","getAuth","handleLogout","signOut","error","console","CONFIG","App","_s","allAdmissionsDataShifts","setAllAdmissionsDataShifts","startTime","shifts","seeDetails","setSeeDetails","explanation","setExplanation","openTable","setOpenTable","dropdown","setDropdown","lastSaved","setLastSaved","loading","setLoading","orderOfAdmissions","setOrderOfAdmissions","array1","setArray1","array2","setArray2","clickedGenerateQueue","setClickedGenerateQueue","originalAlgorithm","setOriginalAlgorithm","show2","setShow2","show3","setShow3","show4","setShow4","config","setConfig","lastSaved5Pm","setLastSaved5Pm","doNotStoreInDb","setDoNotStoreInDb","init","REACT_APP_EMAILJS_PUBLIC_KEY","loadConfig","data","log","err","localDateTime","Object","keys","length","fetchRecentTransaction","default5PMIfBetween7AMAnd6PM","now","Date","currentHour","getHours","result","success","transaction","admissionsObj","sortMain","order","splitOrderOfAdmissions","orderString","parts","split","map","item","firstN1Index","indexOf","secondN1Index","slice","array1x","array2x","fetchRecent5PMTransaction","isXIn2Hours","each","forEach","fivePm","eachIndex","name","numberOfAdmissions","Number","is3In2Hours","getXIn2Hours","sortMainOriginal","timeObj","dropdownSelected","lastSavedTime","getMinutesWorkedFromStartTime","getNumberOfHoursWorked","getChronicLoadRatio","timestamp","explanationArr","push","newObject","JSON","parse","stringify","includes","timestampDefault","sort","a","b","chronicLoadRatio","getFormattedOutput","shiftsLessThanThreshold","shiftsGreaterThanThreshold","window","Cypress","numberOfHoursWorked","shiftsCombined","concat","scenario1","scenario2","scenario3","s4HasFiveAdmissions","s4HasFiveAdmissions_obj","innerEach","innerEachIndex","index","findIndex","obj","removed","splice","location","hostname","normalizedAlr","normalizedClr","composite","combinedArr","getS4","newElement","i","getS3","copyArray2","join","setSortRoles","sortByAscendingName","sortMainByCompositeScoreStatic","differenceArr","alrArr","clrArr","compositeArr","normalizedAlrExplanation","normalizedClrExplanation","compositeArrExplanation","getAlrExplanation","alrx","p95","fixedDiff","difference","getClrExplanation","clrx","admissions","clr","str","toFixed","getCompositeExplanation","isFinalExplanation","alr_f","clr_f","res","getNormalizedAlrExplanation","p95_alr","alr","getNormalizedClrExplanation","p95_clr","getAlrx","increaseAlr","originalAlr","updatedAlr","getClrx","getCompositex","getNormalizedAlrx","getNormalizedClrx","getTimeDifferencex","time1","time2","hours1","minutes1","hours2","minutes2","totalMinutes1","totalMinutes2","diffMinutes","lessThan2Hours","greaterThan2Hours","hasAnyGreaterThan2Hours","format","getMomentTimeWithoutUndefined","time","convertTo12HourFormatSimple","time24","hours","period","hours12","onChange","e","admissionsId","value","target","newObj","updatedShifts","timeDiff","getTimeDifference","getAlr","getClr","getNormalizedAlr","getNormalizedClr","getComposite","admission","timeDifference","shift","shiftIndex","start","diff","timesDropdown","className","isMobileDevice","id","getMostRecentTransactionx","getN5","allAdmissionsDataShiftsx","splitArr","splitArrayAtSecondOccurrence","arr","count","splitIndex","children","startTimeIndex","label","fileName","_jsxFileName","lineNumber","columnNumber","admissionsDatax","returnObjShifts","returnObj","test","navigator","userAgent","takeScreenshot","element","document","getElementById","canvas","toBlob","blob","alert","clipboardItem","ClipboardItem","clipboard","write","sortRoles","sortRolesNameOnly","timeObjShifts","customOrder","Array","isArray","indexA","indexB","Infinity","handleGenerateQueue","orderOfAdmissions_","handleKeyDown","rowIndex","key","preventDefault","getInputById","focus","hasTwoOccurrences","onClick","alt","src","ev","indexx","user","isStatic","style","display","type","disabled","tabIndex","onKeyDown","step","placeholder","inputMode","pattern","width","background","Math","round","vibrate","line","lineIndex","checked","for","getFullYear","_c","$RefreshReg$"],"sources":["/Users/marikalam/workspace/sad/src/HomePage.js"],"sourcesContent":["// import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport {\n    SHIFT_TYPES,\n    START_TIMES,\n    CHRONIC_LOAD_RATIO_THRESHOLD,\n    TIME_FORMAT,\n    ROLE_ORDER,\n    SHOW_ROWS_TABLE,\n    SHOW_ROWS_COPY,\n    CHRONIC_LOAD_RATIO_THRESHOLD_S4,\n    NUMBER_OF_ADMISSIONS_CAP,\n    ROLES_WITH_DEFAULT_TIMES,\n    CONSTANT_COMPOSITE_5PM,\n    CONSTANT_COMPOSITE_7PM,\n    CONSTANT_COMPOSITE_5PM_N5,\n    CONSTANT_COMPOSITE_7PM_N1,\n    CONSTANT_COMPOSITE_7PM_N2,\n    CONSTANT_COMPOSITE_7PM_N3,\n    CONSTANT_COMPOSITE_7PM_N4,\n    P95_7PM,\n    P95_5PM,\n    MINIMIZE_TABLE_STATIC_COMPOSITE_WEB,\n    MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE,\n    ALR_5PM,\n    CLR_5PM,\n    ALR_7PM,\n    CLR_7PM,\n    SHOW_ADMISSIONS_WITH_DETAILS\n} from \"./constants\";\nimport snapshotImg from \"./images/snapshot.png\";\nimport githublogo from \"./images/github-mark.png\"\nimport emailjs from \"@emailjs/browser\";\nimport CONFIG1 from \"./config\";\nimport CopyMessages from \"./CopyMessages\";\nimport {\n    addTransaction, deleteAllTransactions, getMostRecentTransaction,\n    fetchConfigValues\n} from \"./transactionsApi\";\nimport html2canvas from \"html2canvas\";\nconst navigate = useNavigate();\nconst auth = getAuth();\n\nconst handleLogout = async () => {\n  try {\n    await signOut(auth);\n    navigate(\"/\"); // redirect to login\n  } catch (error) {\n    console.error(\"Logout failed:\", error);\n  }\n};\nconst CONFIG = CONFIG1;\n\nexport function App() {\n    // deleteAllTransactions(\"17:00\")\n    // deleteAllTransactions(\"16:00\")\n    // deleteAllTransactions(\"19:00\")\n    const [allAdmissionsDataShifts, setAllAdmissionsDataShifts] = useState({ startTime: \"17:00\", shifts: SHIFT_TYPES })\n\n    const [seeDetails, setSeeDetails] = useState(false);\n    const [explanation, setExplanation] = useState(\"\");\n    const [openTable, setOpenTable] = useState(false);   \n    const [dropdown, setDropdown] = useState(\"17:00\");\n    const [lastSaved, setLastSaved] = useState(\"\");\n    const [loading, setLoading] = useState(true);\n    const [orderOfAdmissions, setOrderOfAdmissions] = useState(\"\");\n    const [array1, setArray1] = useState(\"\");\n    const [array2, setArray2] = useState(\"\");\n    const [clickedGenerateQueue, setClickedGenerateQueue] = useState(false);\n    const [originalAlgorithm, setOriginalAlgorithm] = useState(false);\n    const [show2, setShow2] = useState(false);\n    const [show3, setShow3] = useState(false);\n    const [show4, setShow4] = useState(false);\n    const [config, setConfig] = useState({});\n    const [lastSaved5Pm, setLastSaved5Pm] = useState({})\n    const [doNotStoreInDb, setDoNotStoreInDb] = useState(false);\n\n    useEffect(() => {\n        emailjs.init(CONFIG.REACT_APP_EMAILJS_PUBLIC_KEY);\n\n\n        const loadConfig = async () => {\n            try {\n                const data = await fetchConfigValues();\n                console.log(\"Config values fetched:\", data); // Debugging\n                setConfig(data);\n            } catch (err) {\n                console.log(\"Failed to load configuration.\", err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadConfig();\n    }, []);\n\n    useEffect(() => {\n        let localDateTime = \"\";\n\n        if (Object.keys(config).length === 0) {\n            console.log(\"Config not yet loaded, waiting...\");\n            return;\n        }\n\n        const fetchRecentTransaction = async () => {\n            function default5PMIfBetween7AMAnd6PM() {\n                const now = new Date();\n                const currentHour = now.getHours();\n                return currentHour >= 7 && currentHour < 18;\n            }\n\n            const result = await getMostRecentTransaction(\n                default5PMIfBetween7AMAnd6PM() ? \"17:00\" : \"19:00\"\n            );\n\n            if (result.success) {\n                setLastSaved(result.transaction.localDateTime);\n                if (\n                    result.transaction.admissionsObj.allAdmissionsDataShifts &&\n                    result.transaction.admissionsObj.allAdmissionsDataShifts.shifts\n                ) {\n                    setDropdown(result.transaction.admissionsObj.startTime);\n                    sortMain(\n                        result.transaction.admissionsObj.allAdmissionsDataShifts,\n                        result.transaction.admissionsObj.startTime\n                            ? result.transaction.admissionsObj.startTime\n                            : \"17:00\",\n                        localDateTime\n                    );\n                }\n                setOrderOfAdmissions(result.transaction.order);\n\n                const splitOrderOfAdmissions = (orderString) => {\n                    const parts = orderString.split(\">\").map(item => item.split(\"(\")[0]); // Extract only the shift names\n                    const firstN1Index = parts.indexOf(\"N1\");\n                    const secondN1Index = parts.indexOf(\"N1\", firstN1Index + 1);\n                  \n                    if (secondN1Index !== -1) {\n                      return [\n                        parts.slice(0, secondN1Index), // First array from start to second \"N1\"\n                        parts.slice(secondN1Index)     // Second array from second \"N1\" to end\n                      ];\n                    } else {\n                      return [parts, []]; // If no second \"N1\", return everything as first array\n                    }\n                  };\n                  \n                  const orderString = result.transaction.order;\n                  \n                  const [array1x, array2x] = splitOrderOfAdmissions(orderString);\n                  \n    \n\n                setArray1(array1x);\n                setArray2(array2x);\n            } else {\n                sortMain(\n                    allAdmissionsDataShifts,\n                    default5PMIfBetween7AMAnd6PM() ? \"17:00\" : \"19:00\",\n                    localDateTime\n                );\n            }\n        };\n\n        fetchRecentTransaction();\n\n        const fetchRecent5PMTransaction = async () => {\n            const result = await getMostRecentTransaction(\"17:00\");\n\n            if (result.success) {\n                setLastSaved5Pm(result.transaction.admissionsObj.allAdmissionsDataShifts);\n            }\n        };\n\n        fetchRecent5PMTransaction();\n    }, [config]);\n\n    const isXIn2Hours = (each) => {\n        let isXIn2Hours = false;\n\n        if (dropdown == \"19:00\") {\n            lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n                if (each.name == fivePm.name) {\n                    if (fivePm.numberOfAdmissions !== \"\" &&\n                        (Number(fivePm.numberOfAdmissions)) + 2 == Number(each.numberOfAdmissions)) {\n                        isXIn2Hours = true;\n                        return true;\n                    }\n                }\n            });\n        }\n        return isXIn2Hours;\n    }\n\n    const is3In2Hours = (each) => {\n        let is3In2Hours = false;\n\n        if (dropdown == \"19:00\") {\n            lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n                if (each.name == fivePm.name) {\n                    if (fivePm.numberOfAdmissions !== \"\" &&\n                        (Number(fivePm.numberOfAdmissions)) + 3 <= Number(each.numberOfAdmissions)) {\n                        is3In2Hours = true;\n                        return true;\n                    }\n                }\n            });\n        }\n        return is3In2Hours;\n    }\n\n    const getXIn2Hours = (each) => {\n        let isXIn2Hours = \"\";\n\n        if (dropdown == \"19:00\") {\n            if (each.name == \"N5\" && each.numberOfAdmissions >= 2) {\n                return each.numberOfAdmissions;\n            } else {\n                lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n                    if (each.name == fivePm.name) {\n                        if (fivePm.numberOfAdmissions !== \"\" &&\n                            (Number(fivePm.numberOfAdmissions)) + 2 <= Number(each.numberOfAdmissions)) {\n                            isXIn2Hours = Number(each.numberOfAdmissions) - Number(fivePm.numberOfAdmissions);\n                            return true;\n                        }\n                    }\n                });\n            }\n\n        }\n        return isXIn2Hours;\n    }\n\n    const sortMainOriginal = (timeObj, dropdownSelected, lastSavedTime = \"\") => {\n        const orderOfAdmissions = [];\n        timeObj && timeObj.shifts && timeObj.shifts && timeObj.shifts.forEach((each, eachIndex) => {\n            each[\"startTime\"] = timeObj.startTime ? timeObj.startTime : \"\";\n            each[\"minutesWorkedFromStartTime\"] = getMinutesWorkedFromStartTime(each);\n            each[\"numberOfHoursWorked\"] = getNumberOfHoursWorked(each);\n            each[\"chronicLoadRatio\"] = getChronicLoadRatio(each);\n            each[\"numberOfAdmissions\"] = each.numberOfAdmissions ? each.numberOfAdmissions : \"\";\n            each[\"timestamp\"] = each.timestamp ? each.timestamp : \"\"\n            return each;\n        });\n\n        const explanationArr = [];\n        explanationArr.push(\"Step 1: Rank Order Based on Acute Load (Time Since Last Admission). [ALR = 1 - (Current Time [17:00] - Last Admit Time)/config.P95_7PM]\");\n\n        /*\n        Step 1: Step 1: Sort based on timestamp. If timestamp is the same, sort by chronic load ratio\n        */\n        const newObject = JSON.parse(JSON.stringify(timeObj))\n        if (newObject.shifts) {\n            newObject.shifts.map((each, eachIndex) => {\n                if (ROLES_WITH_DEFAULT_TIMES[dropdownSelected] && ROLES_WITH_DEFAULT_TIMES[dropdownSelected].includes(each.name)) {\n                    each.timestamp = each.timestampDefault;\n                }\n                return each;\n            });\n\n            /* sort by timestamp. if timestamp is the same, sort by chronic load */\n            newObject && newObject.shifts && newObject.shifts.sort((a, b) => {\n                // Compare timestamps first\n                if (a.timestamp < b.timestamp) return -1;\n                if (a.timestamp > b.timestamp) return 1;\n\n                // If timestamps are equal, compare chronicLoadRatio\n                if (a.chronicLoadRatio < b.chronicLoadRatio) return -1;\n                if (a.chronicLoadRatio > b.chronicLoadRatio) return 1;\n\n                // If timestamps are equal, compare chronicLoadRatio\n                if (a.numberOfAdmissions < b.numberOfAdmissions) return -1;\n                if (a.numberOfAdmissions > b.numberOfAdmissions) return 1;\n\n                return 0; // If both are equal\n            });\n            //if same chronic load ratio, then pick the one with lower number of admissions to go first\n            newObject.shifts && newObject.shifts.forEach((each, eachIndex) => {\n                if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                    explanationArr.push(getFormattedOutput(each))\n                }\n            });\n            /*\n            Step 2: For each admitter, if chronic load ratio is >0.67, then deprioritize in the order \n            (either putting in back or pushing back by X spots depending on how great the ratio is)\n            */\n            const shiftsLessThanThreshold = [];\n            const shiftsGreaterThanThreshold = [];\n            explanationArr.push(\"\\n\");\n            explanationArr.push(`Step 2: De-prioritize Admitters with High Chronic Load (Admits/Hours Worked)`);\n\n            newObject.shifts && newObject.shifts.forEach((each, eachIndex) => {\n                if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                    if ((dropdownSelected == \"17:00\" && each.name === \"S4\" && (dropdown == \"19:00\" && (each.chronicLoadRatio > CHRONIC_LOAD_RATIO_THRESHOLD_S4))) ||\n                        (!window.Cypress && isXIn2Hours(each)) ||\n                        (dropdown == \"19:00\" && (each.chronicLoadRatio > CHRONIC_LOAD_RATIO_THRESHOLD))\n                    ) {\n                        // explanationArr.push(getFormattedOutput(each));\n                        explanationArr.push(`${each.name}: (${each.numberOfAdmissions ? each.numberOfAdmissions : \" \"}/${each.numberOfHoursWorked})=${each.chronicLoadRatio}`)\n\n                        shiftsGreaterThanThreshold.push(each);\n                    } else {\n                        shiftsLessThanThreshold.push(each);\n                    }\n                }\n\n            });\n\n            /* Step 3: De-prioritize admitters with high chronic load to the back of the queue */\n            explanationArr.push(\"\\n\");\n            explanationArr.push(`Step 3: De-prioritize admitters with high chronic load to the back of the queue.`)\n            let shiftsCombined = shiftsLessThanThreshold.concat(shiftsGreaterThanThreshold);\n\n            shiftsCombined.forEach((each, eachIndex) => {\n                explanationArr.push(getFormattedOutput(each))\n            });\n\n            /* Step 4: Remove roles with number of admissions greater than 7 */\n            explanationArr.push(\"\\n\");\n            explanationArr.push(`Step 4: Remove high-admission roles.`)\n            shiftsCombined.forEach((each, eachIndex) => {\n                if (dropdown == \"17:00\") {\n                    explanationArr.push(getFormattedOutput(each) + \" (DONE)\")\n                } else if (dropdown == \"19:00\") {\n                    if (each.numberOfAdmissions > NUMBER_OF_ADMISSIONS_CAP) {\n                        explanationArr.push(getFormattedOutput(each) + \" (DONE)\")\n                    }\n                }\n\n            });\n\n            /* Step 5: High chronic load scenarios */\n            // explanationArr.push(\"\\n\");\n            let scenario1 = false;\n            let scenario2 = false;\n            let scenario3 = false\n            if (timeObj.startTime == \"19:00\") {\n                shiftsCombined.forEach((each, eachIndex) => {\n                    /* Scenario 1: \n                    // If S3 has 6 admissions,\n                    // S4 has 6 admissions or\n                    // N5 has 3+ admissions */\n                    if ((each.name == \"S3\" && Number(each.numberOfAdmissions) == 6) ||\n                        (each.name == \"S4\" && Number(each.numberOfAdmissions) == 6) ||\n                        (each.name == \"N5\" && Number(each.numberOfAdmissions) >= 3 && each.name == \"N5\" && Number(each.numberOfAdmissions) <= 6)) {\n                        scenario1 = true;\n                        return;\n                        /* Scenario 2: If S4 has 5 admissions */\n                    } else if (each.name == \"S4\" && Number(each.numberOfAdmissions) == 5) {\n                        scenario1 = false;\n                        scenario2 = true;\n\n                        return;\n                        //If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4 “Insert after N1 in Array2”\n                    }\n                    /*else if (each.name == \"S3\" && Number(each.numberOfAdmissions) == 5){\n                        explanationArr.push(`Step 5: If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4`);\n                        scenario3 = true;\n                        return;\n                    }*/\n                });\n            }\n            if (scenario1) {\n                explanationArr.push(\"Step 5 (Scenario 1): 7PM High Chronic Load Scenario. If S3 or S4 has number of admission of 6 or N5 has number of admissions of 3+, then repeat (N1-N4)x2 and then insert at the end.\");\n\n                /* Step 1: Remove from Array 1. This means that we have to copy Array 1 to Array 2.*/\n                const array1 = [];\n                const array2 = [];\n\n                let s4HasFiveAdmissions = false;\n                let s4HasFiveAdmissions_obj = {};\n                shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                    if (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5\n                    ) {\n                        s4HasFiveAdmissions = true;\n                        s4HasFiveAdmissions_obj = innerEach;\n                    }\n                });\n\n                shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                    if (dropdown == \"17:00\") {\n                        if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6)) {\n\n                        } else {\n                            array2.push(innerEach);\n                        }\n                    } else if (dropdown == \"19:00\") {\n                        if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                            Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n\n                        } else {\n                            array2.push(innerEach);\n                        }\n                    }\n\n                });\n\n                if (s4HasFiveAdmissions) {\n                    let index = array2.findIndex(obj => obj.name === \"S4\");\n\n                    if (index !== -1) {\n                        let [removed] = array2.splice(index, 1);\n\n                        array2.splice(2, 0, removed);\n                    }\n                }\n\n                shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                    if (dropdown == \"17:00\") {\n                        if ((innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                            (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                            (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5) ||\n                            (innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3)) {\n                            explanationArr.push(getFormattedOutput(innerEach));\n                        } else {\n                            array1.push(innerEach);\n                        }\n                    } else if (dropdown == \"19:00\") {\n                        if ((innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                            (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                            (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5) ||\n                            (innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3) ||\n                            Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                            explanationArr.push(getFormattedOutput(innerEach));\n                        } else {\n                            array1.push(innerEach);\n                        }\n                    }\n\n\n                })\n\n                /* Step 2: Create Array 2 but copying over from Array 1*/\n                shiftsCombined = array1.concat(array2);\n\n                setArray1(array1 && array1.map((each) => { \n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                        return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                    } else {\n                        return each.name\n\n                    }\n                 }));\n                setArray2(array2 && array2.map((each) => { \n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                        return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n\n                    } else {\n                        return each.name \n\n                    }\n                }));\n                const combinedArr = array1.concat(array2);\n                shiftsCombined = combinedArr;\n            } else if (scenario2) {\n                explanationArr.push(\"Step 5 (Scenario 2): 7PM High Chronic Load Scenario. If S4 has number of admissions of 5, then N1-N4, N1>N2>S4>N3>N4\");\n\n                /* If S4 has number of admissions of 5, then remove S4 from Array 1. This means that we have to copy Array 1 to Array 2. */\n                const array1 = [];\n                const array2 = [];\n                let getS4 = {};\n                shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                    if (dropdown == \"17:00\") {\n                        if (innerEach.name == \"S4\") {\n                            explanationArr.push(getFormattedOutput(innerEach))\n                            getS4 = innerEach;\n                        } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n                            array1.push(innerEach);\n                        } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n                            array2.push(innerEach);\n                        } else {\n                            array1.push(innerEach);\n                            array2.push(innerEach);\n                        }\n                    } else if (dropdown == \"19:00\") {\n                        if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                        } else if (innerEach.name == \"S4\") {\n                            explanationArr.push(getFormattedOutput(innerEach))\n                            getS4 = innerEach;\n                        } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n                            array1.push(innerEach);\n                        } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n                            array2.push(innerEach);\n                        } else {\n                            array1.push(innerEach);\n                            array2.push(innerEach);\n                        }\n                    }\n\n\n                });\n\n                const newElement = getS4;\n\n                let index = 0;\n                for (let i = 0; i < array2.length; i++) {\n                    if (array2[i].name == \"N2\") {\n                        index = i;\n                    }\n                }\n\n                if (index !== -1) {\n                    // Insert the new element after the found element\n                    array2.splice(index + 1, 0, newElement);\n                }\n\n                // N5 is inserted after N4, if S4 qualifies then S4 inserted After N4, if S3 qualifies then S3 inserted after N4 \n\n                const combinedArr = array1.concat(array2);\n                shiftsCombined = combinedArr\n                setArray1(array1 && array1.map((each) => { \n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                        return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                    } else {\n                        return each.name\n\n                    }\n                 }));\n                setArray2(array2 && array2.map((each) => { \n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                        return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n\n                    } else {\n                        return each.name \n\n                    }\n                }));\n            } else if (scenario3) {\n                const array1 = [];\n                let getS3 = {};\n                shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                    if (dropdown == \"17:00\") {\n                        if (innerEach.name == \"S3\") {\n                            getS3 = innerEach;\n                        } else {\n                            array1.push(innerEach);\n                        }\n                    } else if (dropdown == \"19:00\") {\n                        if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                        } else if (innerEach.name == \"S3\") {\n                            getS3 = innerEach;\n                        } else {\n                            array1.push(innerEach);\n                        }\n                    }\n\n                });\n                const array2 = [];\n                const copyArray2 = [...array1];\n                copyArray2.forEach((innerEach, innerEachIndex) => {\n                    if (dropdown == \"17:00\") {\n                        if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6)) {\n                        } else {\n                            array2.push(innerEach);\n                        }\n                    } else if (dropdown == \"19:00\") {\n                        if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                            Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                        } else {\n                            array2.push(innerEach);\n                        }\n                    }\n\n                })\n\n                const newElement = getS3;\n\n                let index = 0;\n                for (let i = 0; i < array2.length; i++) {\n                    if (array2[i].name == \"N1\") {\n                        index = i;\n                    }\n                }\n\n                if (index !== -1) {\n                    // Insert the new element after the found element\n                    array2.splice(index + 1, 0, newElement);\n                }\n                setArray1(array1 && array1.map((each) => { \n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                        return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                    } else {\n                        return each.name\n\n                    }\n                 }));\n                setArray2(array2 && array2.map((each) => { \n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                        return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n\n                    } else {\n                        return each.name \n\n                    }\n                }));\n                const combinedArr = array1.concat(array2);\n                shiftsCombined = combinedArr;\n            }\n            shiftsCombined.map((each, eachIndex) => {\n                if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                    if (dropdown == \"17:00\") {\n                        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n                            orderOfAdmissions.push(`${each.name}(${each.chronicLoadRatio})`)\n                        } else {\n                            orderOfAdmissions.push(each.name);\n                        }\n                    } else if (dropdown == \"19:00\") {\n                        if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n                            if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n                                orderOfAdmissions.push(`${each.name}(${each.chronicLoadRatio})`)\n                            } else {\n                                orderOfAdmissions.push(each.name);\n\n                            }\n                        }\n                    }\n\n                }\n            })\n\n            setOrderOfAdmissions(orderOfAdmissions.join(\">\"));\n            setExplanation(explanationArr);\n\n            setSortRoles(timeObj, dropdownSelected, lastSavedTime);\n\n            setAllAdmissionsDataShifts(timeObj);\n            sortByAscendingName(timeObj);\n        }\n        return orderOfAdmissions.join(\">\");\n    }\n\n    const sortMain = (timeObj, dropdownSelected, lastSavedTime = \"\") => {\n        if (originalAlgorithm) {\n            return sortMainOriginal(timeObj, dropdownSelected, lastSavedTime);\n        }\n        return sortMainByCompositeScoreStatic(timeObj, dropdownSelected, lastSavedTime);\n    }\n    const sortMainByCompositeScoreStatic = (timeObj, dropdownSelected, lastSavedTime = \"\") => {\n        const orderOfAdmissions = [];\n        timeObj && timeObj.shifts && timeObj.shifts && timeObj.shifts.map((each, eachIndex) => {\n            if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                return each;\n            } else {\n                each[\"timestamp\"] = \"\";\n                each[\"numberOfAdmissions\"] = \"\";\n            }\n            return each;\n        });\n\n        timeObj && timeObj.shifts && timeObj.shifts && timeObj.shifts.forEach((each, eachIndex) => {\n            each[\"startTime\"] = timeObj.startTime ? timeObj.startTime : \"\";\n            each[\"minutesWorkedFromStartTime\"] = getMinutesWorkedFromStartTime(each);\n            each[\"numberOfHoursWorked\"] = getNumberOfHoursWorked(each);\n            each[\"chronicLoadRatio\"] = getChronicLoadRatio(each);\n            each[\"numberOfAdmissions\"] = each.numberOfAdmissions ? each.numberOfAdmissions : \"\";\n            each[\"timestamp\"] = each.timestamp ? each.timestamp : \"\"\n            return each;\n        });\n\n        const explanationArr = [];\n        const differenceArr = [];\n        const alrArr = [];\n        const clrArr = [];\n        const compositeArr = [];\n        const normalizedAlrExplanation = [];\n        const normalizedClrExplanation = [];\n        const compositeArrExplanation = [];\n\n\n        const getAlrExplanation = (each, alrx) => {\n            if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n                let p95 = \"\";\n                if (dropdownSelected == \"19:00\") {\n                    p95 = config.P95_7PM;\n                } else if (dropdownSelected == \"17:00\") {\n                    p95 = config.P95_5PM;\n                }\n\n                let fixedDiff = each.difference;\n                if (each.difference > p95) {\n                    fixedDiff = p95;\n                }\n                return `${each.name}: ${alrx}`;\n            }\n        }\n\n\n        const getClrExplanation = (each, clrx) => {\n            if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n\n                const admissions = Number(each.numberOfAdmissions);\n                let clr = Number(clrx);\n\n                let str = \"\";\n                if (dropdownSelected == \"19:00\") {\n                    if (each.name == \"S2\") {\n                        str = `${each.name}: ${admissions} / 8 = ${clr.toFixed(3)}`;\n                    } else if (each.name == \"S3\") {\n                        str = `${each.name}: ${admissions} / 6 = ${clr.toFixed(3)}`;\n\n                    } else if (each.name == \"S4\") {\n                        str = `${each.name}: ${admissions} / 5 = ${clr.toFixed(3)}`;\n\n                    } else if (each.name == \"N5\") {\n                        str = `${each.name}: ${admissions} / 2 = ${clr.toFixed(3)}`;\n\n                    }\n                    return str;\n                } else if (dropdownSelected == \"17:00\") {\n                    if (each.name == \"S1\") {\n                        str = `${each.name}: ${admissions} / 7 = ${clr.toFixed(3)}`;\n\n                    } else if (each.name == \"S2\") {\n                        str = `${each.name}: ${admissions} / 6 = ${clr.toFixed(3)}`;\n\n                    } else if (each.name == \"S3\") {\n                        str = `${each.name}: ${admissions} / 4 = ${clr.toFixed(3)}`;\n\n                    } else if (each.name == \"S4\") {\n                        str = `${each.name}: ${admissions} / 3 = ${clr.toFixed(3)}`;\n\n                    }\n                    return str;\n                }\n            }\n        }\n\n\n        const getCompositeExplanation = (each, normalizedAlr, normalizedClr, isFinalExplanation) => {\n            const alr_f = dropdownSelected == \"17:00\" ? config.ALR_5PM : config.ALR_7PM;\n            const clr_f = dropdownSelected == \"17:00\" ? config.CLR_5PM : config.CLR_7PM;\n            let res = ((alr_f * Number(normalizedAlr)) + (clr_f * Number(normalizedClr))).toFixed(3);\n            if (dropdownSelected == \"17:00\") {\n                if (each.name == \"N5\") {\n                    res = config.CONSTANT_COMPOSITE_5PM_N5;\n                    return `${each.name}: ${config.CONSTANT_COMPOSITE_5PM_N5}`;\n                }\n            }\n            else if (dropdownSelected == \"19:00\") {\n                if (each.name == \"N1\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N1;\n                    return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N1}`;\n                } else if (each.name == \"N2\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N2;\n                    return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N2}`;\n                } else if (each.name == \"N3\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N3;\n                    return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N3}`;\n                } else if (each.name == \"N4\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N4;\n                    return `${each.name}: ${config.CONSTANT_COMPOSITE_7PM_N4}`;\n                    }\n            }\n\n            if (isFinalExplanation) {\n                return `${each.name}: ${res}`;\n\n            } else {\n                if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n                    return `${each.name}: (${alr_f} * ${normalizedAlr}) + (${clr_f} * ${normalizedClr}) = ${res}`;\n\n                }\n\n            }\n\n        }\n\n\n        const getNormalizedAlrExplanation = (each) => {\n            if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n                let p95_alr = \"\";\n                if (dropdownSelected == \"17:00\") {\n                    p95_alr = 1.00;\n                } else if (dropdownSelected == \"19:00\") {\n                    p95_alr = 1.00;\n                }\n\n                return `${each.name}: ${each.alr} / ${p95_alr} = ${each.normalizedAlr}`\n            }\n        }\n        const getNormalizedClrExplanation = (each) => {\n            if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n                let p95_clr = \"\";\n                if (dropdownSelected == \"17:00\") {\n                    p95_clr = 1.00;\n                } else if (dropdownSelected == \"19:00\") {\n                    p95_clr = 1.00;\n                }\n\n                return `${each.name}: ${each.clr} / ${p95_clr} = ${each.normalizedClr}`\n            }\n        }\n\n        explanationArr.push(\"Step 1: Calculate Acute Load for each Role.\");\n\n        const getAlrx = (each, difference) => {\n            if (dropdownSelected == \"19:00\" && each.name == \"N5\" && Number(each.numberOfAdmissions) == 0){\n                return 0;\n            }\n            let p95 = \"\";\n            if (dropdownSelected == \"19:00\") {\n                p95 = config.P95_7PM;\n            } else if (dropdownSelected == \"17:00\") {\n                p95 = config.P95_5PM;\n            }\n    \n            let fixedDiff = difference;\n            if (difference > p95) {\n                fixedDiff = p95;\n            }\n            let increaseAlr = 0;\n            if (!window.Cypress && dropdownSelected == \"19:00\") {\n                if (each.name == \"N5\" && each.numberOfAdmissions > 1) {\n                    increaseAlr = Number(each.numberOfAdmissions) - 1;\n                } else {\n                    lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n                        if (each.name == fivePm.name) {\n                            if (fivePm.numberOfAdmissions !== \"\" && (Number(fivePm.numberOfAdmissions)) + 2 <= Number(each.numberOfAdmissions)) {\n                                increaseAlr = Number(each.numberOfAdmissions) - Number(fivePm.numberOfAdmissions) - 1;\n                            }\n                        }\n                    })\n                }\n    \n            }\n    \n            const originalAlr = Number(1 - (fixedDiff) / p95);\n            const updatedAlr = originalAlr + increaseAlr;\n            return updatedAlr.toFixed(3);\n        }\n        const getClrx = (each) => {\n            if (dropdownSelected == \"19:00\" && each.name == \"N5\" && Number(each.numberOfAdmissions) == 0){\n                return 0;\n            }\n            const admissions = Number(each.numberOfAdmissions);\n            let clr = 0;\n    \n            if (dropdownSelected == \"19:00\") {\n                if (each.name == \"S2\") {\n                    clr = Number(admissions) / 8;\n                } else if (each.name == \"S3\") {\n                    clr = Number(admissions) / 6;\n                } else if (each.name == \"S4\") {\n                    clr = Number(admissions) / 5;\n                } else if (each.name == \"N5\") {\n                    clr = Number(admissions) / 2;\n                }\n                return clr.toFixed(3);\n            } else if (dropdownSelected == \"17:00\") {\n                if (each.name == \"S1\") {\n                    clr = Number(admissions) / 7;\n                } else if (each.name == \"S2\") {\n                    clr = Number(admissions) / 6;\n                } else if (each.name == \"S3\") {\n                    clr = Number(admissions) / 4;\n                } else if (each.name == \"S4\") {\n                    clr = Number(admissions) / 3;\n                }\n                return clr.toFixed(3);\n            }\n        }\n        const getCompositex = (each, normalizedAlr, normalizedClr) => {\n            const alr_f = dropdownSelected == \"17:00\" ? config.ALR_5PM : config.ALR_7PM;\n            const clr_f = dropdownSelected == \"17:00\" ? config.CLR_5PM : config.CLR_7PM;\n    \n            let res = ((alr_f * Number(normalizedAlr)) + (clr_f * Number(normalizedClr))).toFixed(3);\n            if (dropdownSelected == \"17:00\") {\n                if (each.name == \"N5\") {\n                    res = config.CONSTANT_COMPOSITE_5PM_N5;\n                    return config.CONSTANT_COMPOSITE_5PM_N5;\n                }\n            }\n    \n            else if (dropdownSelected == \"19:00\") {\n                if (each.name == \"N1\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N1;\n                    return config.CONSTANT_COMPOSITE_7PM_N1;\n                } else if (each.name == \"N2\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N2;\n                    return config.CONSTANT_COMPOSITE_7PM_N2;\n                } else if (each.name == \"N3\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N3;\n                    return config.CONSTANT_COMPOSITE_7PM_N3;\n                } else if (each.name == \"N4\") {\n                    res = config.CONSTANT_COMPOSITE_7PM_N4;\n                    return config.CONSTANT_COMPOSITE_7PM_N4;\n                    }\n            }\n            return Number(res).toFixed(3);\n        }\n    \n        const getNormalizedAlrx = (each, alrx) => {\n            let p95_alr = \"\";\n            if (dropdownSelected == \"17:00\") {\n                p95_alr = 1.00;\n            } else if (dropdownSelected == \"19:00\") {\n                p95_alr = 1.00;\n            }\n    \n            const normalizedAlr = Number(alrx) / p95_alr;\n            return Number(normalizedAlr).toFixed(3);\n        }\n        const getNormalizedClrx = (each, clrx) => {\n            let p95_clr = \"\";\n            if (dropdownSelected == \"17:00\") {\n                p95_clr = 1.00;\n            } else if (dropdownSelected == \"19:00\") {\n                p95_clr = 1.00;\n            }\n    \n            const normalizedAlr = clrx / p95_clr;\n            return Number(normalizedAlr).toFixed(3);\n        }\n        const getTimeDifferencex = (time1) => {\n\n            if (time1) {\n                const time2 = dropdownSelected;\n                // Convert times to minutes\n                const [hours1, minutes1] = time1.split(':').map(Number);\n                const [hours2, minutes2] = time2.split(':').map(Number);\n    \n                const totalMinutes1 = hours1 * 60 + minutes1;\n                const totalMinutes2 = hours2 * 60 + minutes2;\n    \n                // Calculate difference in minutes\n                let diffMinutes = totalMinutes2 - totalMinutes1;\n    \n                return diffMinutes;\n    \n            } else {\n                return 0;\n            }\n    \n        }\n    \n        timeObj.shifts.forEach((each, eachIndex) => {\n            if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                const difference = getTimeDifferencex(each.timestamp);\n                const alrx = getAlrx(each, difference);\n                const clrx = getClrx(each)\n                const normalizedAlr = getNormalizedAlrx(each, alrx);\n                const normalizedClr = getNormalizedClrx(each, clrx);\n                const composite = getCompositex(each, normalizedAlr, normalizedClr);\n\n                each[\"difference\"] = difference;\n                each[\"alr\"] = alrx;\n                each[\"clr\"] = clrx;\n                each[\"composite\"] = composite;\n                each[\"normalizedAlr\"] = normalizedAlr;\n                each[\"normalizedClr\"] = normalizedClr;\n\n                compositeArrExplanation.push(getCompositeExplanation(each, normalizedAlr, normalizedClr));\n                alrArr.push(getAlrExplanation(each, alrx));\n                clrArr.push(getClrExplanation(each, clrx));\n                normalizedAlrExplanation.push(getNormalizedAlrExplanation(each));\n                normalizedClrExplanation.push(getNormalizedClrExplanation(each));\n            }\n        });\n\n        /*\n        Step 1: Time Difference\n        */\n        timeObj.shifts.sort((a, b) => {\n            if (a.difference > b.difference) {\n                return 1;\n            }\n            if (a.difference < b.difference) {\n                return -1;\n            }\n            return 0;\n        });\n\n        timeObj.shifts.sort((a, b) => {\n            if (a.composite < b.composite) {\n                return -1;\n            }\n            if (b.composite > b.composite) {\n                return 1;\n            }\n            return 0;\n        });\n\n        // explanationArr.push(`ALR = 1 - (Minutes Before The Hour/ P95)`);\n\n        alrArr.map((each, eachIndex) => {\n            explanationArr.push(each);\n        });\n\n        explanationArr.push(\"\\n\")\n        explanationArr.push(`Step 2: Calculate Chronic Load for each Role.`);\n        explanationArr.push(\"CLR = Number of Admits / Hours Worked So Far\")\n\n\n        clrArr.map((each, eachIndex) => {\n            explanationArr.push(each);\n        });\n\n        // explanationArr.push(\"\\n\")\n        // explanationArr.push(`Step 3: Calculate Normalized ALR.`);\n\n        // normalizedAlrExplanation.map((each, eachIndex) => {\n        //     explanationArr.push(each);\n        // });\n\n        // explanationArr.push(\"\\n\")\n        // explanationArr.push(`Step 4: Calculate Normalized CLR.`);\n\n        // normalizedClrExplanation.map((each, eachIndex) => {\n        //     explanationArr.push(each);\n        // });\n\n        explanationArr.push(\"\\n\")\n        explanationArr.push(`Step 3: Calculate Composite Score.`);\n\n        compositeArrExplanation.forEach((each, eachIndex) => {\n            // explanationArr.push(each);\n        })\n\n        timeObj.shifts.sort((a, b) => {\n            if (Number(a.composite) > Number(b.composite)) {\n                return 1;\n            }\n            if (Number(a.composite) < Number(b.composite)) {\n                return -1;\n            }\n            return 0;\n        });\n\n        explanationArr.push(\"\\n\")\n        explanationArr.push(\"Step 4: Generate the Order, with Roles having the Lowest Composite Score Prioritized First.\");\n\n        timeObj.shifts.forEach((each, eachIndex) => {\n            if (SHOW_ROWS_TABLE[dropdownSelected].includes(each.name)) {\n                explanationArr.push(`${each.name}: ${each.composite}`)\n            }\n        });\n\n        const lessThan2Hours = [];\n        const greaterThan2Hours = [];\n\n        let hasAnyGreaterThan2Hours = false;\n\n        timeObj.shifts.forEach((each, eachIndex) => {\n            if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                if ((dropdownSelected == \"19:00\" && !window.Cypress && isXIn2Hours(each)) || (dropdownSelected == \"19:00\" && (each.chronicLoadRatio > CHRONIC_LOAD_RATIO_THRESHOLD_S4))) {\n                    greaterThan2Hours.push(each);\n                    hasAnyGreaterThan2Hours = true;\n                } else {\n                    lessThan2Hours.push(each);\n                }\n            }\n        });\n        greaterThan2Hours.sort((a, b) => {\n            if (a.composite > b.composite) {\n                return 1;\n            } else if (a.composite < b.composite) {\n                return -1;\n            }\n            return 0;\n        });\n\n\n        // if (hasAnyGreaterThan2Hours) {\n        //     explanationArr.push(\"\\n\")\n        //     explanationArr.push(\"Step 7: Check if any roles have had 2 or more admissions in the last 2 hours. Then sort by composite score.\");\n        //     greaterThan2Hours && greaterThan2Hours.forEach((each) => {\n        //         explanationArr.push(`${each.name}: had ${getXIn2Hours(each)} admissions in the last 2 hours /  Composite Score: ${each.composite}`);\n        //     })\n        // }\n\n\n        let shiftsCombined = lessThan2Hours.concat(greaterThan2Hours);\n\n\n        let scenario1 = false;\n        let scenario2 = false;\n        let scenario3 = false\n        if (timeObj.startTime == \"19:00\") {\n            shiftsCombined.forEach((each, eachIndex) => {\n                /* Scenario 1: \n                // If S3 has 6 admissions,\n                // S4 has 6 admissions or\n                // N5 has 3+ admissions */\n                if ((each.name == \"S3\" && Number(each.numberOfAdmissions) == 6) ||\n                    (each.name == \"S4\" && Number(each.numberOfAdmissions) == 6) ||\n                    (each.name == \"N5\" && Number(each.numberOfAdmissions) >= 3 && each.name == \"N5\" && Number(each.numberOfAdmissions) <= 6)) {\n                    scenario1 = true;\n                    return;\n                    /* Scenario 2: If S4 has 5 admissions */\n                } else if (each.name == \"S4\" && Number(each.numberOfAdmissions) == 5) {\n                    scenario1 = false;\n                    scenario2 = true;\n\n                    return;\n                    //If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4 “Insert after N1 in Array2”\n                }\n                /*else if (each.name == \"S3\" && Number(each.numberOfAdmissions) == 5){\n                    explanationArr.push(`Step 5: If S3 has number of admissions of 5, then (N1-N4), N1>S3>N2>N3>N4`);\n                    scenario3 = true;\n                    return;\n                }*/\n            });\n        }\n        if (scenario1) {\n            // explanationArr.push(\"\\n\");\n            // explanationArr.push(\"7PM High Chronic Load Scenario. If S3 or S4 has number of admission of 6 or N5 has number of admissions of 3+, then repeat (N1-N4)x2 and then insert at the end.\");\n\n            /* Step 1: Remove from Array 1. This means that we have to copy Array 1 to Array 2.*/\n            const array1 = [];\n            const array2 = [];\n\n            let s4HasFiveAdmissions = false;\n            let s4HasFiveAdmissions_obj = {};\n            shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                if (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5\n                ) {\n                    s4HasFiveAdmissions = true;\n                    s4HasFiveAdmissions_obj = innerEach;\n                }\n            });\n\n            shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                if (dropdownSelected == \"17:00\") {\n                    if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6)) {\n\n                    } else {\n                        array2.push(innerEach);\n                    }\n                } else if (dropdownSelected == \"19:00\") {\n                    if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                        Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n\n                    } else {\n                        array2.push(innerEach);\n                    }\n                }\n\n            });\n\n            if (s4HasFiveAdmissions) {\n                let index = array2.findIndex(obj => obj.name === \"S4\");\n\n                if (index !== -1) {\n                    let [removed] = array2.splice(index, 1);\n\n                    array2.splice(2, 0, removed);\n                }\n            }\n\n            shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                if (dropdownSelected == \"17:00\") {\n                    if ((innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                        (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                        (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5) ||\n                        (innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3)) {\n                        // explanationArr.push(getFormattedOutputCompositeScore2(innerEach));\n                    } else {\n                        array1.push(innerEach);\n                    }\n                } else if (dropdownSelected == \"19:00\") {\n                    if ((innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                        (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                        (innerEach.name == \"S4\" && Number(innerEach.numberOfAdmissions) == 5) ||\n                        (innerEach.name == \"N5\" && Number(innerEach.numberOfAdmissions) >= 3) ||\n                        (is3In2Hours(innerEach)) ||\n                        Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                        // explanationArr.push(getFormattedOutputCompositeScore2(innerEach));\n                    } else {\n                        array1.push(innerEach);\n                    }\n                }\n\n            })\n\n            /* Step 2: Create Array 2 but copying over from Array 1*/\n            // shiftsCombined = array1.concat(array2);\n\n            setArray1(array1 && array1.map((each) => { \n                if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                    return each.name\n                    // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                } else {\n                    return each.name\n\n                }\n             }));\n            setArray2(array2 && array2.map((each) => { \n                if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                    // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                    return each.name\n                } else {\n                    return each.name \n\n                }\n            }));\n            const combinedArr = array1.concat(array2);\n            shiftsCombined = combinedArr;\n        } else if (scenario2) {\n            // explanationArr.push(\"\\n\");\n            // explanationArr.push(\"7PM High Chronic Load Scenario. If S4 has number of admissions of 5, then N1-N4, N1>N2>S4>N3>N4\");\n\n            /* If S4 has number of admissions of 5, then remove S4 from Array 1. This means that we have to copy Array 1 to Array 2. */\n            const array1 = [];\n            const array2 = [];\n            let getS4 = {};\n            shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                if (dropdownSelected == \"17:00\") {\n                    if (innerEach.name == \"S4\") {\n                        // explanationArr.push(getFormattedOutputCompositeScore2(innerEach))\n                        getS4 = innerEach;\n                    } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n                        array1.push(innerEach);\n                    } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n                        array2.push(innerEach);\n                    } else {\n                        array1.push(innerEach);\n                        array2.push(innerEach);\n                    }\n                } else if (dropdownSelected == \"19:00\") {\n                    if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                    } else if (innerEach.name == \"S4\") {\n                        // explanationArr.push(getFormattedOutputCompositeScore2(innerEach))\n                        getS4 = innerEach;\n                    } else if (innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) {\n                        array1.push(innerEach);\n                    } else if (innerEach.name == \"S3\" && Number(innerEach.numberOfAdmissions) == 6) {\n                        array2.push(innerEach);\n                    } else {\n                        array1.push(innerEach);\n                        array2.push(innerEach);\n                    }\n                }\n\n            });\n\n            const newElement = getS4;\n\n            let index = 0;\n            for (let i = 0; i < array2.length; i++) {\n                if (array2[i].name == \"N2\") {\n                    index = i;\n                }\n            }\n\n            if (index !== -1) {\n                // Insert the new element after the found element\n                array2.splice(index + 1, 0, newElement);\n            }\n\n            // N5 is inserted after N4, if S4 qualifies then S4 inserted After N4, if S3 qualifies then S3 inserted after N4 \n\n            const combinedArr = array1.concat(array2);\n            shiftsCombined = combinedArr\n            setArray1(array1 && array1.map((each) => { \n                if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                    return each.name;\n                    // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                } else {\n                    return each.name\n\n                }\n             }));\n            setArray2(array2 && array2.map((each) => { \n                if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                    return each.name;\n                    // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n\n                } else {\n                    return each.name;\n\n                }\n            }));\n        } else if (scenario3) {\n            // explanationArr.push(\"\\n\");\n            const array1 = [];\n            let getS3 = {};\n            shiftsCombined.forEach((innerEach, innerEachIndex) => {\n                if (dropdownSelected == \"17:00\") {\n                    if (innerEach.name == \"S3\") {\n                        getS3 = innerEach;\n                    } else {\n                        array1.push(innerEach);\n                    }\n                } else if (dropdownSelected == \"19:00\") {\n                    if (Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                    } else if (innerEach.name == \"S3\") {\n                        getS3 = innerEach;\n                    } else {\n                        array1.push(innerEach);\n                    }\n                }\n\n            });\n            const array2 = [];\n            const copyArray2 = [...array1];\n            copyArray2.forEach((innerEach, innerEachIndex) => {\n                if (dropdownSelected == \"17:00\") {\n                    if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6)) {\n                    } else {\n                        array2.push(innerEach);\n                    }\n                } else if (dropdownSelected == \"19:00\") {\n                    if ((innerEach.name == \"S2\" && Number(innerEach.numberOfAdmissions) == 6) ||\n                        Number(innerEach.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                    } else {\n                        array2.push(innerEach);\n                    }\n                }\n\n            })\n\n            const newElement = getS3;\n\n            let index = 0;\n            for (let i = 0; i < array2.length; i++) {\n                if (array2[i].name == \"N1\") {\n                    index = i;\n                }\n            }\n\n            if (index !== -1) {\n                // Insert the new element after the found element\n                array2.splice(index + 1, 0, newElement);\n            }\n            setArray1(array1 && array1.map((each) => { \n                if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                    return each.name;\n                    // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n                } else {\n                    return each.name;\n\n                }\n             }));\n            setArray2(array2 && array2.map((each) => { \n                if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS){\n                    return each.name \n                    // return `${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`;\n\n                } else {\n                    return each.name;\n\n                }\n            }));\n            const combinedArr = array1.concat(array2);\n            shiftsCombined = combinedArr;\n        }\n        shiftsCombined.map((each, eachIndex) => {\n            if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n                if (dropdownSelected == \"17:00\") {\n                    if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n                        orderOfAdmissions.push(each.name);\n                        // orderOfAdmissions.push(`${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`)\n                    } else {\n                        orderOfAdmissions.push(each.name);\n\n                    }\n                } else if (dropdownSelected == \"19:00\") {\n                    if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n                        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n                            orderOfAdmissions.push(each.name);\n                            // orderOfAdmissions.push(`${each.name}(${each.normalizedAlr},${each.normalizedClr},${each.composite})`)\n\n                        } else {\n                            orderOfAdmissions.push(each.name);\n\n                        }\n\n                    }\n                }\n\n            }\n        });\n        if (shiftsCombined && shiftsCombined.length == 0) {\n            shiftsCombined = timeObj.shifts;\n        }\n\n        setOrderOfAdmissions(orderOfAdmissions.join(\">\"));\n        setExplanation(explanationArr);\n\n        setSortRoles(timeObj, dropdownSelected, lastSavedTime);\n\n        setAllAdmissionsDataShifts(timeObj);\n        sortByAscendingName(timeObj);\n\n        return orderOfAdmissions.join(\">\");\n    }\n\n    const getFormattedOutput = (each) => {\n        return `${each.name} [ ${each.timestamp ? moment(each.timestamp, TIME_FORMAT).format(TIME_FORMAT) : \"--:-- --\"} ] (${each.numberOfAdmissions ? each.numberOfAdmissions : \" \"}/${each.numberOfHoursWorked})=${each.chronicLoadRatio}`;\n    }\n\n    const getMomentTimeWithoutUndefined = (time) => {\n        return time ? moment(time, TIME_FORMAT).format(TIME_FORMAT) : \"--:-- --\"\n    }\n\n    const convertTo12HourFormatSimple = (time24) => {\n        const [hours] = time24 && time24.split(':').map(Number);\n        const period = hours >= 12 ? 'PM' : 'AM';\n        const hours12 = hours % 12 || 12;\n        return `${hours12}:00${period}`;\n    }\n\n    const onChange = (e, admissionsId) => {\n        if (dropdown == \"17:00\") {\n            setClickedGenerateQueue(false);\n        }\n        const { name, value } = e.target\n\n        const newObj = {};\n\n        const updatedShifts = allAdmissionsDataShifts && allAdmissionsDataShifts.shifts && allAdmissionsDataShifts.shifts.map((item) =>\n            item.admissionsId === admissionsId && name ? { ...item, [name]: value } : item\n        )\n\n        updatedShifts.map((each, eachIndex) => {\n            const timeDiff = getTimeDifference(each.timestamp);;\n\n            each[\"startTime\"] = dropdown;\n            each[\"minutesWorkedFromStartTime\"] = getMinutesWorkedFromStartTime(each);\n            each[\"numberOfHoursWorked\"] = getNumberOfHoursWorked(each);\n            each[\"chronicLoadRatio\"] = getChronicLoadRatio(each);\n            each[\"difference\"] = timeDiff;\n            each[\"alr\"] = getAlr(each, each.difference);\n            each[\"clr\"] = getClr(each);\n            each[\"normalizedAlr\"] = getNormalizedAlr(each, each.alr);\n            each[\"normalizedClr\"] = getNormalizedClr(each, each.clr)\n            each[\"composite\"] = getComposite(each, each.normalizedAlr, each.normalizedClr);\n            return each;\n        });\n\n        newObj[\"startTime\"] = dropdown;\n        newObj[\"shifts\"] = updatedShifts ? updatedShifts : [];\n\n        setAllAdmissionsDataShifts(newObj);\n    }\n\n    const getChronicLoadRatio = (admission) => {\n        const timeDifference = admission.numberOfHoursWorked;\n        const chronicLoadRatio = (Number(admission.numberOfAdmissions) / (Number(timeDifference))).toFixed(2);\n\n        if (chronicLoadRatio == \"NaN\" || chronicLoadRatio == \"Infinity\") {\n            return \"0.00\";\n        } else {\n            return chronicLoadRatio ? chronicLoadRatio : \"\";\n\n        }\n\n    }\n\n    const getTimeDifference = (time1) => {\n\n        if (time1) {\n            const time2 = dropdown;\n            // Convert times to minutes\n            const [hours1, minutes1] = time1.split(':').map(Number);\n            const [hours2, minutes2] = time2.split(':').map(Number);\n\n            const totalMinutes1 = hours1 * 60 + minutes1;\n            const totalMinutes2 = hours2 * 60 + minutes2;\n\n            // Calculate difference in minutes\n            let diffMinutes = totalMinutes2 - totalMinutes1;\n\n            return diffMinutes;\n\n        } else {\n            return 0;\n        }\n\n    }\n\n    const getAlr = (each, difference) => {\n        let p95 = \"\";\n        if (dropdown == \"19:00\") {\n            p95 = config.P95_7PM;\n        } else if (dropdown == \"17:00\") {\n            p95 = config.P95_5PM;\n        }\n\n        let fixedDiff = difference;\n        if (difference > p95) {\n            fixedDiff = p95;\n        }\n        let increaseAlr = 0;\n        if (!window.Cypress && dropdown == \"19:00\") {\n            if (each.name == \"N5\" && each.numberOfAdmissions > 1) {\n                increaseAlr = Number(each.numberOfAdmissions) - 1;\n            } else {\n                lastSaved5Pm && lastSaved5Pm.shifts && lastSaved5Pm.shifts.forEach((fivePm, eachIndex) => {\n                    if (each.name == fivePm.name) {\n                        if (fivePm.numberOfAdmissions !== \"\" && (Number(fivePm.numberOfAdmissions)) + 2 <= Number(each.numberOfAdmissions)) {\n                            increaseAlr = Number(each.numberOfAdmissions) - Number(fivePm.numberOfAdmissions) - 1;\n                        }\n                    }\n                })\n            }\n\n        }\n\n        const originalAlr = Number(1 - (fixedDiff) / p95);\n        const updatedAlr = originalAlr + increaseAlr;\n        return updatedAlr.toFixed(3);\n    }\n    const getClr = (each) => {\n        const admissions = Number(each.numberOfAdmissions);\n        let clr = 0;\n\n        if (dropdown == \"19:00\") {\n            if (each.name == \"S2\") {\n                clr = Number(admissions) / 8;\n            } else if (each.name == \"S3\") {\n                clr = Number(admissions) / 6;\n            } else if (each.name == \"S4\") {\n                clr = Number(admissions) / 5;\n            } else if (each.name == \"N5\") {\n                clr = Number(admissions) / 2;\n            }\n            return clr.toFixed(3);\n        } else if (dropdown == \"17:00\") {\n            if (each.name == \"S1\") {\n                clr = Number(admissions) / 7;\n            } else if (each.name == \"S2\") {\n                clr = Number(admissions) / 6;\n            } else if (each.name == \"S3\") {\n                clr = Number(admissions) / 4;\n            } else if (each.name == \"S4\") {\n                clr = Number(admissions) / 3;\n            }\n            return clr.toFixed(3);\n        }\n    }\n\n    const getComposite = (each, normalizedAlr, normalizedClr, dropdownSelected) => {\n        const alr_f = dropdownSelected == \"17:00\" ? config.ALR_5PM : config.ALR_7PM;\n        const clr_f = dropdownSelected == \"17:00\" ? config.CLR_5PM : config.CLR_7PM;\n\n        let res = ((alr_f * Number(normalizedAlr)) + (clr_f * Number(normalizedClr))).toFixed(3);\n        if (dropdown == \"17:00\") {\n            if (each.name == \"N5\") {\n                res = config.CONSTANT_COMPOSITE_5PM_N5;\n                return config.CONSTANT_COMPOSITE_5PM_N5;\n            }\n        }\n\n        else if (dropdown == \"19:00\") {\n            if (each.name == \"N1\") {\n                res = config.CONSTANT_COMPOSITE_7PM_N1;\n                return config.CONSTANT_COMPOSITE_7PM_N1;\n            } else if (each.name == \"N2\") {\n                res = config.CONSTANT_COMPOSITE_7PM_N2;\n                return config.CONSTANT_COMPOSITE_7PM_N2;\n            } else if (each.name == \"N3\") {\n                res = config.CONSTANT_COMPOSITE_7PM_N3;\n                return config.CONSTANT_COMPOSITE_7PM_N3;\n            } else if (each.name == \"N4\") {\n                res = config.CONSTANT_COMPOSITE_7PM_N4;\n                return config.CONSTANT_COMPOSITE_7PM_N4;\n                }\n        }\n        return Number(res).toFixed(3);\n    }\n\n    const getNormalizedAlr = (each, alrx) => {\n        let p95_alr = \"\";\n        if (dropdown == \"17:00\") {\n            p95_alr = 1.00;\n        } else if (dropdown == \"19:00\") {\n            p95_alr = 1.00;\n        }\n\n        const normalizedAlr = Number(alrx) / p95_alr;\n        return Number(normalizedAlr).toFixed(3);\n    }\n    const getNormalizedClr = (each, clrx) => {\n        let p95_clr = \"\";\n        if (dropdown == \"17:00\") {\n            p95_clr = 1.00;\n        } else if (dropdown == \"19:00\") {\n            p95_clr = 1.00;\n        }\n\n        const normalizedAlr = clrx / p95_clr;\n        return Number(normalizedAlr).toFixed(3);\n    }\n\n\n    const getNumberOfHoursWorked = (admission) => {\n        let startTime = \"\";\n        SHIFT_TYPES.forEach((shift, shiftIndex) => {\n            if (shift.name === admission.name) {\n                startTime = shift.start;\n            }\n        });\n\n        const now = admission.startTime;\n        const timeDifference = moment(now, TIME_FORMAT).diff(moment(startTime, TIME_FORMAT), \"hours\", true).toFixed();\n        return timeDifference ? timeDifference : \"\";\n\n    }\n\n    const getMinutesWorkedFromStartTime = (admission) => {\n        const now = getMomentTimeWithoutUndefined(admission.startTime);\n        const timeDifference = moment(now, TIME_FORMAT).diff(moment(admission.timestamp, TIME_FORMAT), \"minutes\", true).toFixed();\n        return timeDifference ? timeDifference : \"\";\n    }\n\n    const timesDropdown = () => {\n        return (\n            <select\n                value={dropdown}\n                name=\"timesdropdown\"\n                className={isMobileDevice() ? \"timesdropdownwithoutsnapshot\" : \"timesdropdown\"}\n                id=\"timesdropdown\"\n                onChange={e => {\n                    const startTime = e.target.value;\n                    if (startTime == \"19:00\" && clickedGenerateQueue) {\n                        const getMostRecentTransactionx = async (startTime) => {\n                            const res = await getMostRecentTransaction(startTime);\n\n                            if (!res.success) {\n                                const newObj = {};\n                                newObj[\"startTime\"] = \"19:00\";\n                                newObj[\"shifts\"] = SHIFT_TYPES;\n                                setDropdown(\"19:00\");\n                                sortMain(newObj, \"19:00\")\n                            } else if (res && res.transaction) {\n                                let getN5 = {};\n\n                                res.transaction.admissionsObj.allAdmissionsDataShifts.shifts.forEach((each, eachIndex) => {\n                                    if (each.name == \"N5\") {\n                                        getN5 = each;\n                                        return;\n                                    }\n                                })\n\n                                const newObj = {};\n\n                                const shifts = [];\n\n                                allAdmissionsDataShifts.shifts.forEach((each, eachIndex) => {\n                                    if (each.name == \"N5\") {\n                                        each = getN5;\n                                    }\n                                    shifts.push(each);\n                                })\n                                newObj[\"startTime\"] = \"19:00\";\n                                newObj[\"shifts\"] = shifts;\n                                setDropdown(\"19:00\");\n                                // setAllAdmissionsDataShifts(newObj);\n                                sortMain(newObj, \"19:00\")\n                                // setLastSaved(\"\")\n\n                            }\n                        }\n                        getMostRecentTransactionx(\"19:00\");\n\n                    } else {\n                        setClickedGenerateQueue(false);\n                        setDropdown(startTime);\n                        setLastSaved(\"\")\n                        setAllAdmissionsDataShifts({ shifts: SHIFT_TYPES, dropdown: startTime });\n                        const getMostRecentTransactionx = async (startTime) => {\n                            const res = await getMostRecentTransaction(startTime);\n\n                            if (res && res.transaction) {\n                                const order = res.transaction.order;\n                                const allAdmissionsDataShiftsx = res.transaction.admissionsObj.allAdmissionsDataShifts;\n                                const lastSavedTime = res.transaction.localDateTime;\n                                // if (allAdmissionsDataShiftsx) {\n                                //     setAllAdmissionsDataShifts(allAdmissionsDataShiftsx);\n                                // }\n\n                                if (order.split(\">\").length > 10) {\n                                    const splitArr = order.split(\">\");\n                                    function splitArrayAtSecondOccurrence(arr, value) {\n                                        let count = 0;\n                                        let splitIndex = -1;\n\n                                        for (let i = 0; i < arr.length; i++) {\n                                            if (arr[i] === value) {\n                                                count++;\n                                                if (count === 2) {\n                                                    splitIndex = i;\n                                                    break;\n                                                }\n                                            }\n                                        }\n\n                                        if (splitIndex !== -1) {\n                                            setArray1(arr.slice(0, splitIndex));\n                                            setArray2(arr.slice(splitIndex));\n                                            return [arr.slice(0, splitIndex), arr.slice(splitIndex)];\n                                        } else {\n                                            return [arr];\n                                        }\n                                    }\n                                    setOrderOfAdmissions(order);\n                                    splitArrayAtSecondOccurrence(splitArr, \"N1\");\n\n                                } else if (order) {\n                                    setOrderOfAdmissions(order);\n                                }\n\n                                if (lastSavedTime) {\n                                    setLastSaved(lastSavedTime);\n                                }\n                                // setSortRoles(allAdmissionsDataShiftsx, startTime, lastSavedTime);\n                                sortMain(allAdmissionsDataShiftsx, startTime)\n                            }\n                        }\n                        getMostRecentTransactionx(startTime);\n\n                    }\n                }\n                }>\n                {START_TIMES.map((startTime, startTimeIndex) => {\n                    return (<option\n                        value={`${startTime.value}`}>\n                        {`${startTime.label}`}\n                    </option>);\n                })}\n            </select>\n        );\n    }\n\n    const sortByAscendingName = (admissionsDatax) => {\n        const returnObjShifts = admissionsDatax.shifts.sort((a, b) => {\n            return ROLE_ORDER.indexOf(a.name) - ROLE_ORDER.indexOf(b.name);\n        });\n\n        let returnObj = {};\n        returnObj.startTime = admissionsDatax.startTime;\n        returnObj.shifts = returnObjShifts;\n\n        setAllAdmissionsDataShifts(returnObj);\n    }\n\n    const isMobileDevice = () => {\n        if (/Mobi|Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent)) {\n            // console.log(\"User is on a phone or tablet.\");\n            return true;\n        } else {\n            // console.log(\"User is on a desktop.\");\n            return false;\n        }\n    }\n\n    const takeScreenshot = async () => {\n\n        const element = document.getElementById(\"screenshotimg\");\n\n        // Capture the div as a canvas\n        const canvas = await html2canvas(element);\n\n        // Convert the canvas to a Blob\n        canvas.toBlob(async (blob) => {\n            if (!blob) {\n                alert('Failed to capture the screenshot.');\n                return;\n            }\n\n            // Copy the Blob to the clipboard\n            try {\n                const clipboardItem = new ClipboardItem({ 'image/png': blob });\n                await navigator.clipboard.write([clipboardItem]);\n                alert('✅ Screenshot copied to clipboard!');\n            } catch (err) {\n                console.error('Failed to copy the screenshot to the clipboard:', err);\n                alert('Failed to copy the screenshot. Check your browser permissions.');\n            }\n        });\n\n    }\n\n    const setSortRoles = (admissionsDatax, dropdownSelected, lastSavedTime = \"\") => {\n        const sortRoles = [];\n        let sortRolesNameOnly = [];\n\n        let timeObjShifts = admissionsDatax.shifts;\n\n        //sort by name\n        const customOrder = [\"DA\", \"S1\", \"S2\", \"S3\", \"S4\", \"N5\", \"N1\", \"N2\", \"N3\", \"N4\"];\n\n        // Sort the data based on the custom order\n        timeObjShifts && Array.isArray(timeObjShifts) && timeObjShifts.sort((a, b) => {\n            const indexA = customOrder.indexOf(a.name);\n            const indexB = customOrder.indexOf(b.name);\n\n            // If the names are not in the custom order, move them to the end\n            return (indexA !== -1 ? indexA : Infinity) - (indexB !== -1 ? indexB : Infinity);\n        });\n\n\n        // let sevenPmS4greaterThanCap = false;\n        timeObjShifts && Array.isArray(timeObjShifts) && timeObjShifts.forEach((each, eachIndex) => {\n            if (SHOW_ROWS_COPY[dropdownSelected].includes(each.name)) {\n\n                if (dropdown == \"17:00\") {\n                    if (each.numberOfHoursWorked + \"\" !== \"0\") {\n                        sortRoles.push(getFormattedOutput(each));\n                    }\n                    if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n                        sortRolesNameOnly.push(`${each.name}(${each.chronicLoadRatio})`);\n                    }\n                } else if (dropdown == \"19:00\") {\n                    if (each.numberOfHoursWorked + \"\" !== \"0\") {\n                        if (Number(each.numberOfAdmissions) > NUMBER_OF_ADMISSIONS_CAP) {\n                            sortRoles.push(getFormattedOutput(each) + \" (DONE)\");\n                        } else {\n                            sortRoles.push(getFormattedOutput(each));\n                        }\n                    }\n                    if (Number(each.numberOfAdmissions) <= NUMBER_OF_ADMISSIONS_CAP) {\n                        if (window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS) {\n                            sortRolesNameOnly.push(`${each.name}(${each.chronicLoadRatio})`);\n                        } else {\n                            sortRolesNameOnly.push(each.name);\n                        }\n                    }\n                }\n\n            }\n        });\n\n        sortRoles.push(`${sortRolesNameOnly.join(\">\")}`);\n\n        return timeObjShifts;\n    }\n\n    const handleGenerateQueue = async (e) => {\n        setClickedGenerateQueue(true);\n        const orderOfAdmissions_ = sortMain(allAdmissionsDataShifts, dropdown);\n    \n        if (!doNotStoreInDb) {\n            try {\n                // Wait for addTransaction to complete before fetching the recent transaction\n                await addTransaction(\n                    { allAdmissionsDataShifts, startTime: dropdown },\n                    orderOfAdmissions_\n                );\n    \n                // Now fetch the most recent transaction\n                const result = await getMostRecentTransaction(dropdown);\n                \n                // console.log(\"recent transaction\", result);\n                if (result.success) {\n                    setLastSaved(result.transaction.localDateTime);\n                    setAllAdmissionsDataShifts(allAdmissionsDataShifts);\n                    setDropdown(dropdown);\n    \n                    if (dropdown === \"17:00\") {\n                        setLastSaved5Pm(result.transaction.admissionsObj.allAdmissionsDataShifts);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error generating queue:\", error);\n            }\n        }\n    };\n    \n    const handleKeyDown = (e, rowIndex) => {\n        const data = allAdmissionsDataShifts.shifts;\n        if (e.key === 'ArrowDown') {\n            e.preventDefault();\n            if (rowIndex < data.length - 1) {\n                const getInputById = document.getElementById(`${e.target.name}_${rowIndex + 1}`);\n\n                if (getInputById) {\n                    getInputById.focus();\n                }\n            }\n        } else if (e.key === 'ArrowUp') {\n            e.preventDefault(); // Prevent the default action (scrolling)\n            // Move to the previous row\n            if (rowIndex > 0) {\n                const getInputById = document.getElementById(`${e.target.name}_${rowIndex - 1}`);\n\n                if (getInputById) {\n                    getInputById.focus();\n                }\n            }\n        } else if (e.target.name == \"numberOfAdmissions\" && e.key === \"ArrowLeft\") {\n\n            const getElementById = document.getElementById(`timestamp_${rowIndex}`);\n            if (getElementById) {\n                getElementById.focus();\n            }\n        } else if (e.target.name == \"timestamp\" && e.key === \"ArrowRight\") {\n\n            const getElementById = document.getElementById(`numberOfAdmissions_${rowIndex}`);\n            if (getElementById) {\n                getElementById.focus();\n            }\n        }\n    };\n\n    function hasTwoOccurrences(str, target) {\n        // Split the string by the target substring and check if there are more than 2 parts\n        const parts = str.split(target);\n        return parts.length > 2;\n    }\n\n    return (\n        <div>\n            <div className=\"header\">\n                \n            <h1 className=\"text-5xl font-bold text-center tracking-widest leading-tight\">\n  S.A.D.Q\n</h1>\n<p className=\"text-center text-lg mt-2\">\n  Standardized Admissions Distribution Queue\n</p>\n                <h2 className=\"subtitle\">Standardized Admissions Distribution Queue</h2>\n                <div className=\"bg-blue-900 text-white py-6 px-4 relative\">\n  <button\n    onClick={handleLogout}\n    className=\"absolute right-4 top-4 bg-red-500 text-white px-4 py-1 rounded hover:bg-red-600\"\n  >\n    Logout\n  </button>\n  <h1 className=\"text-5xl font-bold text-center tracking-widest\">S.A.D.Q</h1>\n  <p className=\"text-center text-lg mt-2\">Standardized Admissions Distribution Queue</p>\n</div>\n            </div>\n\n            {loading ? <div className=\"loading\">\n                <div className=\"spinner\">\n                    {/* Loading... */}\n                    <div className=\"rect1\"></div>\n                    <div className=\"rect2\"></div>\n                    <div className=\"rect3\"></div>\n                    <div className=\"rect4\"></div>\n                    <div className=\"rect5\"></div>\n                </div>\n            </div> :\n                <div className=\"container\">\n                    <div className=\"flex-container-just1item\">\n                        {timesDropdown()}\n                    </div>\n                    {!isMobileDevice() && <img\n                        alt=\"copy button\"\n                        className=\"copybutton\"\n                        id=\"snapshot-button\"\n                        src={snapshotImg}\n                        onClick={(ev) => {\n                            takeScreenshot();\n\n                        }} />}\n                    <button\n                        onClick={() => setOpenTable(!openTable)}\n                        className=\"expand\"\n                    >\n                        {openTable ? \"Minimize Table ⬆️\" : \"Expand Table ⬇️\"}\n                    </button>\n                    <table id=\"screenshotimg\">\n\n                        <table id=\"reacttable\">\n                            <thead>\n                                {openTable ? (\n                                    <tr>\n                                        {MINIMIZE_TABLE_STATIC_COMPOSITE_WEB.map((each, eachIndex) => {\n                                            if (each[0] == \"name\") {\n                                                return (\n                                                    <th className={\"th_10percent\"} key={eachIndex}>{each[1]}</th>\n                                                );\n                                            } else if (each[0] == \"timestamp\" || each[0] == \"numberOfAdmissions\" || each[0] == \"chronicLoadRatio\") {\n                                                return (\n                                                    <th className=\"th_25percent\" key={eachIndex}>{each[1]}</th>\n                                                );\n                                            }\n                                            return (<th key={eachIndex}>{each[1]}</th>);\n                                        })}\n                                    </tr>\n                                ) : isMobileDevice() ? (\n                                    <tr>\n                                        {MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE.map((each, eachIndex) => {\n                                            if (each[0] == \"name\") {\n                                                return (\n                                                    <th className=\"th_10percent\" key={eachIndex}>{each[1]}</th>\n                                                );\n                                            } else if (each[0] == \"timestamp\" || each[0] == \"numberOfAdmissions\" || each[0] == \"chronicLoadRatio\") {\n                                                return (\n                                                    <th className=\"th_25percent\" key={eachIndex}>{each[1]}</th>\n                                                );\n                                            }\n                                            return (<th key={eachIndex}>{each[1]}</th>);\n                                        })}\n                                    </tr>\n                                ) : (\n                                    <tr>\n                                        {MINIMIZE_TABLE_STATIC_COMPOSITE_MOBILE.map((each, eachIndex) => {\n                                            if (each[0] == \"name\") {\n                                                return (\n                                                    <th className=\"th_10percent\" key={eachIndex}>{each[1]}</th>\n                                                );\n                                            } else if (each[0] == \"timestamp\" || each[0] == \"numberOfAdmissions\" || each[0] == \"chronicLoadRatio\") {\n                                                return (\n                                                    <th className=\"th_25percent\" key={eachIndex}>{each[1]}</th>\n                                                );\n                                            }\n                                            return (<th key={eachIndex}>{each[1]}</th>);\n                                        })}\n                                    </tr>\n                                )}\n                            </thead>\n                            <tbody>\n                                {allAdmissionsDataShifts.shifts &&\n                                    allAdmissionsDataShifts.shifts.length > 0 &&\n                                    allAdmissionsDataShifts.shifts.map((admission, indexx) => {\n                                        let index = 0;\n                                        if (SHOW_ROWS_TABLE[dropdown] && SHOW_ROWS_TABLE[dropdown].includes(admission.name)) {\n                                            index = SHOW_ROWS_TABLE[dropdown].findIndex((user) => user == admission.name);\n                                            return (\n                                                !admission.isStatic && (\n                                                    <tr\n                                                        style={SHOW_ROWS_TABLE[dropdown] && SHOW_ROWS_TABLE[dropdown].includes(admission.name) ? {} : { display: \"none\" }}\n                                                        id={\"admissionsDataRow_\" + index}\n                                                        className={\"admissionsDataRow\"}\n                                                        key={admission.admissionsId}\n                                                    >\n                                                        <td>\n                                                            <input name={`name_${index}`} className=\"bold-fields\" value={admission.name || \"\"} type=\"text\" disabled={true} />\n                                                        </td>\n                                                        {/* {openTable && (\n                                                            <td>\n                                                                <input name=\"shiftTimePeriod\" value={admission.shiftTimePeriod} type=\"text\" disabled={true} />\n                                                            </td>\n                                                        )} */}\n                                                        <td className=\"usercanedit\" tabIndex={-1} onKeyDown={(e) => handleKeyDown(e, index)}>\n                                                            <input\n                                                                id={`timestamp_${index}`}\n                                                                name=\"timestamp\"\n                                                                className=\"timestamp\"\n                                                                value={admission.timestamp || \"\"}\n                                                                type=\"time\"\n                                                                onChange={(e) => onChange(e, admission.admissionsId)}\n                                                                disabled={admission.isStatic}\n                                                            />\n                                                        </td>\n                                                        <td className=\"usercanedit cell-with-number\" tabIndex={-1} onKeyDown={(e) => handleKeyDown(e, index)}>\n                                                            <span className=\"small-number\">{getXIn2Hours(admission)}</span>\n                                                            <input\n                                                                id={`numberOfAdmissions_${index}`}\n                                                                name=\"numberOfAdmissions\"\n                                                                className=\"numberOfAdmissions\"\n                                                                value={admission.numberOfAdmissions || \"\"}\n                                                                step=\"1\"\n                                                                type=\"number\"\n                                                                placeholder=\"---\"\n                                                                onChange={(e) => onChange(e, admission.admissionsId)}\n                                                                disabled={admission.isStatic}\n                                                                inputMode=\"numeric\"\n                                                                pattern=\"[0-9]*\"\n                                                            />\n                                                        </td>\n                                                        {openTable &&\n                                                            <td className=\"backgroundlightgray\">\n                                                                <div className=\"progress-cell\">\n                                                                    <div className=\"progress-container\">\n                                                                        <div\n                                                                            className=\"progress-bar\"\n                                                                            style={{\n                                                                                width: `${(admission.normalizedAlr || 0) * 100}%`,\n                                                                                background: (admission.normalizedAlr || 0) > 0.5\n                                                                                    ? \"linear-gradient(to right, #800000, #800000)\" /* Red gradient */\n                                                                                    : \"linear-gradient(to right, #800000, #800000)\" /* Green gradient */\n                                                                            }}\n                                                                        />\n                                                                    </div>\n                                                                    <span className=\"progress-text\">\n                                                                        {admission.normalizedAlr ? Number(admission.normalizedAlr).toFixed(2) : \"\"}\n                                                                    </span>\n                                                                </div>\n                                                            </td>}\n\n                                                        {<td className=\"backgroundlightgray\">\n                                                            <div className=\"progress-cell\">\n                                                                <div className=\"progress-container\">\n                                                                    <div\n                                                                        className=\"progress-bar\"\n                                                                        style={{\n                                                                            width: `${(admission.clr || 0) * 100}%`,\n                                                                            background: (admission.clr || 0) > 0.5\n                                                                                ? \"linear-gradient(to right, #1a0dab, #1a0dab)\" /* Red gradient */\n                                                                                : \"linear-gradient(to right,  #1a0dab, #1a0dab)\" /* Green gradient */\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                <span className=\"progress-text\">\n                                                                    {openTable ? Number(admission.clr).toFixed(2) : `${Math.round((admission.clr || 0) * 100)}%`}\n                                                                </span>\n                                                            </div>\n                                                        </td>}\n                                                        {false && openTable && (\n                                                            <td>\n                                                                <input\n                                                                    name=\"numberHoursWorked\"\n                                                                    value={admission.numberOfHoursWorked || \"\"}\n                                                                    type=\"number\"\n                                                                    placeholder=\"Enter number\"\n                                                                    disabled={true}\n                                                                />\n                                                            </td>\n                                                        )}\n                                                        {openTable &&\n                                                            <td className=\"backgroundlightgray\">\n                                                                <div className=\"progress-cell\">\n                                                                    <div className=\"progress-container\">\n                                                                        <div\n                                                                            className=\"progress-bar\"\n                                                                            style={{\n                                                                                width: `${(admission.composite || 0) * 100}%`,\n                                                                                background: (admission.composite || 0) > 0.5\n                                                                                    ? \"linear-gradient(to right, #1a0dab, #1a0dab)\" /* Red gradient */\n                                                                                    : \"linear-gradient(to right,  #1a0dab, #1a0dab)\" /* Green gradient */\n                                                                            }}\n                                                                        />\n                                                                    </div>\n                                                                    <span className=\"progress-text\">\n                                                                        {admission.composite ? Number(admission.composite).toFixed(2) : \"\"}\n                                                                    </span>\n                                                                </div>\n                                                            </td>}\n                                                    </tr>\n                                                )\n                                            );\n                                        }\n                                    })}\n                            </tbody>\n                        </table>\n                        <p className=\"endoutputcenter\" id=\"orderofadmissions_title\">{`Order of Admits ${lastSaved}`}</p>\n                        {window.location.hostname === 'localhost' && SHOW_ADMISSIONS_WITH_DETAILS && (originalAlgorithm) ?\n                            <p className=\"endoutputcenter\" id=\"orderofadmissions_output\">\n                                {orderOfAdmissions && orderOfAdmissions}\n                            </p>\n                            : hasTwoOccurrences(orderOfAdmissions, \"N1\") ?\n                                <div>\n                                    <p className=\"endoutputcenter\" id=\"orderofadmissions_output\">{array1 ? `(${array1.join(\">\")})¹` : \"\"}<br></br>{array2 && `(${array2.join(\">\")})ⁿ`}</p>\n                                </div>\n                                : <p className=\"endoutputcenter\" id=\"orderofadmissions_output\">{orderOfAdmissions}</p>\n                        }\n                        <div className=\"lastsaved-yellowmessage\">\n                            {/* {\"Generated \" + lastSaved } */}\n                            {/* {\"This tool is for workflow support only. Providers remain responsible for admissions and patient care decisions.\"} */}\n\n                        </div>\n                    </table>\n\n                    <section>\n                        <button id=\"generateQueue\" onClick={(e) => {\n                            handleGenerateQueue(e);\n\n                            if (\"vibrate\" in navigator) {\n                                navigator.vibrate(200);\n                              }\n                        }}>\n                            Generate Queue\n                        </button>\n                    </section>\n\n                    {/* <button className=\"seedetails\" id=\"seedetails\" onClick={() => {\n                        setSeeDetails(!seeDetails);\n                        // setShow1( false);\n                        setShow2(false);\n                        setShow3(false);\n                        setShow4(false);\n                    }\n                    }>{seeDetails ? \"Hide Explanation\" : \"Show Explanation\"}</button> */}\n\n                    {seeDetails && <fieldset className=\"notes\">\n                        <p className=\"bold\">Explanation</p>\n\n                        {/* Part 2: Explanation */}\n                        <button className=\"explanation\" onClick={() => {\n                            setShow2(!show2);\n                        }\n                        }>{!show2 ? \"> Step by Step\" : \"< Step by Step\"}</button><br></br>\n\n                        {show2 && <div id=\"stepbystepdetails\">\n                            {explanation && explanation.map((line, lineIndex) => {\n                                if (line == \"\\n\") {\n                                    return <br></br>\n                                } else {\n                                    return <p>{line}</p>\n                                }\n                            })}<br></br>\n                        </div>}\n                        \n                        <input\n                                        id=\"doNotStoreInDb\"\n                                        placeholder=\"Generate Queue without Storing in Database\"\n                                        className=\"input-left\"\n                                        label=\"\"\n                                        type=\"checkbox\"\n                                        onChange={(e) => {\n                                            setDoNotStoreInDb(e.target.checked);\n                                        }}\n                                    />\n                                    <label for=\"originalAlgorithm\">Generate Queue without Storing in Database</label>\n\n                        {/* Part 3: Copy Message */}\n\n                        {/* <button className=\"explanation\"\n                            onClick={() => {\n                                setShow3(!show3);\n                            }}>{!show3 ? \"> Copy Messages\" : \"< Copy Messages\"}</button><br></br> */}\n\n                        {/* {show3 && <CopyMessages />} */}\n\n\n                        {/* Part 4: Set Composite Score */}\n                        {/* <button className=\"explanation\" onClick={() => {\n                            setShow4(!show4);\n                        }\n                        }>{!show4 ? \"> Set Algorithm\" : \"< Set Algorithm\"}</button><br></br> */}\n\n                        {show4 &&\n                            <div>\n\n                                <div>\n                                    <input\n                                        id=\"originalAlgorithmCheckbox\"\n                                        placeholder=\"Original Algorithm\"\n                                        className=\"input-left\"\n                                        label=\"\"\n                                        type=\"checkbox\"\n                                        onChange={(e) => {\n                                            setOriginalAlgorithm(e.target.checked);\n                                        }}\n                                    />\n                                    <label for=\"originalAlgorithm\">Original Algorithm v1.0</label>\n                                </div>\n\n                            </div>\n                        }\n\n\n\n                    </fieldset>}<br></br>\n                    <div className=\"footer\">\n                        {/* <img\n                            alt=\"copy button\"\n                            className=\"githubbutton\"\n                            src={githublogo}\n                            onClick={(ev) => {\n                                window.open(\"https://github.com/sadqueue/sad/tree/main\", '_blank');\n                            }} /> */}\n                        <p className=\"footer-text\">&copy; {new Date().getFullYear()} Genki MD LLC</p>\n                        <p className=\"footer-text\">All rights reserved. Licensed use only.</p>\n                        <p className=\"footer-text\">This tool is for workflow support only. Providers are responsible for final admission and care decisions.</p>\n                    </div>\n                </div>}\n        </div>\n    )\n\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}