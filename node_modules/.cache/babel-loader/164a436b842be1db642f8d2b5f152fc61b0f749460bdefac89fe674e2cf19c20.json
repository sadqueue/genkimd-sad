{"ast":null,"code":"import { ref, push, get, remove, query, orderByKey, limitToLast, orderByChild, set, getDatabase, update } from \"firebase/database\";\nimport { ENV_POINT_TO } from \"./constants\";\nimport { db } from \"./firebaseConfig\";\n// import { getDatabase, ref, remove } from \"firebase/database\";\n\n// Fetch all config values from Firebase\nexport const fetchConfigValues = async () => {\n  const db = getDatabase();\n  const configRef = ref(db, \"config\");\n  try {\n    const snapshot = await get(configRef);\n    if (snapshot.exists()) {\n      console.log(\"Config data fetched:\", snapshot.val()); // Debug log\n      return snapshot.val();\n    } else {\n      console.warn(\"No configuration found in Firebase.\");\n      return {};\n    }\n  } catch (error) {\n    console.error(\"Error fetching config from Firebase:\", error);\n    return {};\n  }\n};\n\n// Update a single config value in Firebase\nexport const updateConfigValue = async (key, value) => {\n  const db = getDatabase();\n  const configRef = ref(db, `config/${key}`);\n  try {\n    await set(configRef, value);\n    console.log(`${key} updated successfully.`);\n  } catch (error) {\n    console.error(`Error updating ${key}:`, error);\n  }\n};\n\n// Initialize default values if config is empty\nexport const initializeConfigValues = async () => {\n  const db = getDatabase();\n  const configRef = ref(db, \"config\");\n  try {\n    const snapshot = await get(configRef);\n    if (!snapshot.exists()) {\n      const defaultConfig = {\n        ALR_5PM: 0.6,\n        CLR_5PM: 0.4,\n        ALR_7PM: 0.7,\n        CLR_7PM: 0.3,\n        P95_7PM: 180,\n        P95_5PM: 180,\n        CONSTANT_COMPOSITE_5PM_N5: 0.49,\n        CONSTANT_COMPOSITE_7PM_N1: 0.49,\n        CONSTANT_COMPOSITE_7PM_N2: 0.59,\n        CONSTANT_COMPOSITE_7PM_N3: 0.69,\n        CONSTANT_COMPOSITE_7PM_N4: 0.79\n      };\n      await set(configRef, defaultConfig);\n      console.log(\"Initialized default config values.\");\n    }\n  } catch (error) {\n    console.error(\"Error initializing config:\", error);\n  }\n};\nexport const getFirebaseRef = (startTime, manuallySetEnv = \"\") => {\n  let transactionsRef = \"\";\n  if (manuallySetEnv == \"prod\" || ENV_POINT_TO == \"prod\") {\n    transactionsRef = ref(db, `transactions_${startTime}`);\n  } else {\n    if (ENV_POINT_TO == \"prod\") {\n      transactionsRef = ref(db, `transactions_${startTime}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionsRef = ref(db, `transactions_local_${startTime}`);\n    } else {\n      transactionsRef = ref(db, `transactions_${startTime}`);\n    }\n  }\n  return transactionsRef;\n};\nexport const getLast10Transactions = async admissionsObj => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime);\n  const transactionsQuery = query(transactionsRef, orderByKey(), limitToLast(10));\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      return Object.entries(data).map(([key, value]) => ({\n        id: key,\n        ...value\n      }));\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\n// Function to add a new transaction\nexport const addTransaction = async (admissionsObj, order, copyBox) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime);\n  try {\n    const getUserDeviceDetails = () => {\n      return {\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language\n      };\n    };\n    const timestamp = new Date();\n    const month = timestamp.getMonth() + 1; // Months are zero-based\n    const day = timestamp.getDate();\n    const year = timestamp.getFullYear();\n    let hours = timestamp.getHours();\n    const minutes = String(timestamp.getMinutes()).padStart(2, '0');\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12 || 12; // Convert 0 to 12 for 12-hour format\n\n    const localDateTime = `${month}/${day}/${year} ${hours}:${minutes}${ampm}`;\n    const newTransaction = {\n      timestamp: timestamp,\n      localDateTime: localDateTime,\n      userDeviceDetails: getUserDeviceDetails(),\n      admissionsObj,\n      order: order ? order : \"\",\n      deleted: false\n      // copyBox: copyBox ? copyBox : \"\"\n    };\n\n    // Push the new transaction to the database\n    const newRef = await push(transactionsRef, newTransaction);\n    return {\n      success: true,\n      key: newRef.key\n    }; // Return the unique key\n  } catch (error) {\n    console.error(\"Error adding transaction:\", error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\nexport const getLast50Transactions = async admissionsObj => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime, \"prod\");\n  const transactionsQuery = query(transactionsRef, orderByKey(), limitToLast(100));\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      return Object.entries(data).map(([key, value]) => {\n        var _value$order, _value$admissionsObj, _value$admissionsObj$;\n        return {\n          id: key,\n          timestamp: value.localDateTime || \"N/A\",\n          orderOfAdmissions: ((_value$order = value.order) === null || _value$order === void 0 ? void 0 : _value$order.split(\">\")) || [],\n          shifts: ((_value$admissionsObj = value.admissionsObj) === null || _value$admissionsObj === void 0 ? void 0 : (_value$admissionsObj$ = _value$admissionsObj.allAdmissionsDataShifts) === null || _value$admissionsObj$ === void 0 ? void 0 : _value$admissionsObj$.shifts) || [],\n          deleted: value.deleted || false\n        };\n      }).filter(transaction => !transaction.deleted); // Properly filter deleted transactions\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\nexport const getAllTransactions = async startTime => {\n  // Reference to the \"5PM\" table in Firebase\n  const transactionsRef = getFirebaseRef(startTime);\n  const transactionsQuery = query(transactionsRef, orderByKey());\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      return Object.entries(data).map(([key, value]) => {\n        var _value$order2, _value$admissionsObj2, _value$admissionsObj3;\n        return {\n          id: key,\n          timestamp: value.localDateTime || \"N/A\",\n          orderOfAdmissions: ((_value$order2 = value.order) === null || _value$order2 === void 0 ? void 0 : _value$order2.split(\">\")) || [],\n          shifts: ((_value$admissionsObj2 = value.admissionsObj) === null || _value$admissionsObj2 === void 0 ? void 0 : (_value$admissionsObj3 = _value$admissionsObj2.allAdmissionsDataShifts) === null || _value$admissionsObj3 === void 0 ? void 0 : _value$admissionsObj3.shifts) || []\n        };\n      }).filter(transaction => !transaction.deleted); // Filter out deleted transactions\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\nexport const deleteAllTransactions = async startTime => {\n  const transactionsRef = getFirebaseRef(startTime);\n  try {\n    await remove(transactionsRef);\n    console.log(\"All transactions deleted successfully!\");\n  } catch (error) {\n    console.error(\"Error deleting all transactions:\", error);\n  }\n};\nexport const deleteTransaction = async (startTime, transactionId) => {\n  try {\n    let transactionRef = \"\";\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n    await update(transactionRef, {\n      deleted: true\n    });\n    console.log(`Transaction ${transactionId} marked as deleted.`);\n  } catch (error) {\n    console.error(`Error deleting transaction ${transactionId}:`, error);\n  }\n};\nexport const hardDeleteTransaction = async (startTime, transactionId) => {\n  try {\n    let transactionRef = \"\";\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === \"localhost\") {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n    await remove(transactionRef); // Completely removes the transaction from the database\n    console.log(`Transaction ${transactionId} has been permanently deleted.`);\n  } catch (error) {\n    console.error(`Error deleting transaction ${transactionId}:`, error);\n  }\n};\nexport const getMostRecentTransaction = async startTime => {\n  try {\n    const transactionsRef = getFirebaseRef(startTime);\n    const recentQuery = query(transactionsRef, orderByChild(\"timestamp\"), limitToLast(1));\n    const snapshot = await get(recentQuery);\n    if (snapshot && snapshot.exists()) {\n      const data = snapshot.val();\n      const [key, value] = Object.entries(data)[0];\n      return {\n        success: true,\n        transaction: {\n          id: key,\n          ...value\n        }\n      };\n    } else {\n      return {\n        success: false,\n        message: \"No transactions found.\"\n      };\n    }\n  } catch (error) {\n    console.error(\"Error fetching the most recent transaction:\", error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\nexport const updateTransaction = async (startTime, transactionId, updatedTransaction) => {\n  try {\n    let transactionRef = \"\";\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    // Remove any properties we don't want to update in Firebase\n    const {\n      deleted,\n      ...dataToUpdate\n    } = updatedTransaction;\n    await update(transactionRef, dataToUpdate);\n    console.log(`Transaction ${transactionId} updated successfully.`);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error(`Error updating transaction ${transactionId}:`, error);\n    throw error; // Rethrow so the UI can handle it\n  }\n};","map":{"version":3,"names":["ref","push","get","remove","query","orderByKey","limitToLast","orderByChild","set","getDatabase","update","ENV_POINT_TO","db","fetchConfigValues","configRef","snapshot","exists","console","log","val","warn","error","updateConfigValue","key","value","initializeConfigValues","defaultConfig","ALR_5PM","CLR_5PM","ALR_7PM","CLR_7PM","P95_7PM","P95_5PM","CONSTANT_COMPOSITE_5PM_N5","CONSTANT_COMPOSITE_7PM_N1","CONSTANT_COMPOSITE_7PM_N2","CONSTANT_COMPOSITE_7PM_N3","CONSTANT_COMPOSITE_7PM_N4","getFirebaseRef","startTime","manuallySetEnv","transactionsRef","window","location","hostname","getLast10Transactions","admissionsObj","transactionsQuery","data","Object","entries","map","id","addTransaction","order","copyBox","getUserDeviceDetails","userAgent","navigator","platform","language","timestamp","Date","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","String","getMinutes","padStart","ampm","localDateTime","newTransaction","userDeviceDetails","deleted","newRef","success","getLast50Transactions","_value$order","_value$admissionsObj","_value$admissionsObj$","orderOfAdmissions","split","shifts","allAdmissionsDataShifts","filter","transaction","getAllTransactions","_value$order2","_value$admissionsObj2","_value$admissionsObj3","deleteAllTransactions","deleteTransaction","transactionId","transactionRef","hardDeleteTransaction","getMostRecentTransaction","recentQuery","message","updateTransaction","updatedTransaction","dataToUpdate"],"sources":["/Users/marikalam/workspace/sad/src/transactionsApi.js"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  remove,\n  query,\n  orderByKey,\n  limitToLast,\n  orderByChild,\n  set,\n  getDatabase,\n  update\n} from \"firebase/database\";\nimport { ENV_POINT_TO } from \"./constants\";\nimport { db } from \"./firebaseConfig\";\n// import { getDatabase, ref, remove } from \"firebase/database\";\n\n// Fetch all config values from Firebase\nexport const fetchConfigValues = async () => {\n  const db = getDatabase();\n  const configRef = ref(db, \"config\");\n\n  try {\n    const snapshot = await get(configRef);\n    if (snapshot.exists()) {\n      console.log(\"Config data fetched:\", snapshot.val()); // Debug log\n      return snapshot.val();\n    } else {\n      console.warn(\"No configuration found in Firebase.\");\n      return {};\n    }\n  } catch (error) {\n    console.error(\"Error fetching config from Firebase:\", error);\n    return {};\n  }\n};\n\n// Update a single config value in Firebase\nexport const updateConfigValue = async (key, value) => {\n  const db = getDatabase();\n  const configRef = ref(db, `config/${key}`);\n\n  try {\n    await set(configRef, value);\n    console.log(`${key} updated successfully.`);\n  } catch (error) {\n    console.error(`Error updating ${key}:`, error);\n  }\n};\n\n// Initialize default values if config is empty\nexport const initializeConfigValues = async () => {\n  const db = getDatabase();\n  const configRef = ref(db, \"config\");\n\n  try {\n    const snapshot = await get(configRef);\n    if (!snapshot.exists()) {\n      const defaultConfig = {\n        ALR_5PM: 0.6,\n        CLR_5PM: 0.4,\n        ALR_7PM: 0.7,\n        CLR_7PM: 0.3,\n        P95_7PM: 180,\n        P95_5PM: 180,\n        CONSTANT_COMPOSITE_5PM_N5: 0.49,\n        CONSTANT_COMPOSITE_7PM_N1: 0.49,\n        CONSTANT_COMPOSITE_7PM_N2: 0.59,\n        CONSTANT_COMPOSITE_7PM_N3: 0.69,\n        CONSTANT_COMPOSITE_7PM_N4: 0.79\n      };\n      await set(configRef, defaultConfig);\n      console.log(\"Initialized default config values.\");\n    }\n  } catch (error) {\n    console.error(\"Error initializing config:\", error);\n  }\n};\n\nexport const getFirebaseRef = (startTime, manuallySetEnv = \"\") => {\n  let transactionsRef = \"\";\n\n  if (manuallySetEnv == \"prod\" || ENV_POINT_TO ==\"prod\"){\n    transactionsRef = ref(db, `transactions_${startTime}`);\n  } else {\n    if (ENV_POINT_TO == \"prod\") {\n      transactionsRef = ref(db, `transactions_${startTime}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionsRef = ref(db, `transactions_local_${startTime}`);\n    } else {\n      transactionsRef = ref(db, `transactions_${startTime}`);\n    }\n  }\n  \n  return transactionsRef\n}\nexport const getLast10Transactions = async (admissionsObj) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime);\n  const transactionsQuery = query(transactionsRef, orderByKey(), limitToLast(10));\n\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      return Object.entries(data).map(([key, value]) => ({\n        id: key,\n        ...value,\n      }));\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\n// Function to add a new transaction\nexport const addTransaction = async (admissionsObj, order, copyBox) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime);\n\n  try {\n    const getUserDeviceDetails = () => {\n      return {\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n      };\n    };\n\n    const timestamp = new Date();\n    const month = timestamp.getMonth() + 1; // Months are zero-based\n    const day = timestamp.getDate();\n    const year = timestamp.getFullYear();\n    let hours = timestamp.getHours();\n    const minutes = String(timestamp.getMinutes()).padStart(2, '0');\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12 || 12; // Convert 0 to 12 for 12-hour format\n\n    const localDateTime = `${month}/${day}/${year} ${hours}:${minutes}${ampm}`;\n\n    const newTransaction = {\n      timestamp: timestamp,\n      localDateTime: localDateTime,\n      userDeviceDetails: getUserDeviceDetails(),\n      admissionsObj,\n      order: order ? order : \"\",\n      deleted: false\n      // copyBox: copyBox ? copyBox : \"\"\n    };\n\n    // Push the new transaction to the database\n    const newRef = await push(transactionsRef, newTransaction);\n    return { success: true, key: newRef.key }; // Return the unique key\n  } catch (error) {\n    console.error(\"Error adding transaction:\", error);\n    return { success: false, error };\n  }\n};\n\nexport const getLast50Transactions = async (admissionsObj) => {\n  const transactionsRef = getFirebaseRef(admissionsObj.startTime, \"prod\");\n  const transactionsQuery = query(transactionsRef, orderByKey(), limitToLast(100));\n\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n\n      return Object.entries(data)\n        .map(([key, value]) => ({\n          id: key,\n          timestamp: value.localDateTime || \"N/A\",\n          orderOfAdmissions: value.order?.split(\">\") || [],\n          shifts: value.admissionsObj?.allAdmissionsDataShifts?.shifts || [],\n          deleted: value.deleted || false,\n        }))\n        .filter(transaction => !transaction.deleted); // Properly filter deleted transactions\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\nexport const getAllTransactions = async (startTime) => {\n  // Reference to the \"5PM\" table in Firebase\n  const transactionsRef = getFirebaseRef(startTime);\n  const transactionsQuery = query(transactionsRef, orderByKey());\n\n  try {\n    const snapshot = await get(transactionsQuery);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n\n      return Object.entries(data)\n        .map(([key, value]) => ({\n          id: key,\n          timestamp: value.localDateTime || \"N/A\",\n          orderOfAdmissions: value.order?.split(\">\") || [],\n          shifts: value.admissionsObj?.allAdmissionsDataShifts?.shifts || [],\n        }))\n        .filter(transaction => !transaction.deleted); // Filter out deleted transactions\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching transactions:\", error);\n    throw error;\n  }\n};\n\nexport const deleteAllTransactions = async (startTime) => {\n  const transactionsRef = getFirebaseRef(startTime);\n  try {\n    await remove(transactionsRef);\n    console.log(\"All transactions deleted successfully!\");\n  } catch (error) {\n    console.error(\"Error deleting all transactions:\", error);\n  }\n};\n\nexport const deleteTransaction = async (startTime, transactionId) => {\n  try {\n    let transactionRef = \"\";\n\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    await update(transactionRef, { deleted: true });\n    console.log(`Transaction ${transactionId} marked as deleted.`);\n  } catch (error) {\n    console.error(`Error deleting transaction ${transactionId}:`, error);\n  }\n};\n\nexport const hardDeleteTransaction = async (startTime, transactionId) => {\n  try {\n    let transactionRef = \"\";\n\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === \"localhost\") {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    await remove(transactionRef); // Completely removes the transaction from the database\n    console.log(`Transaction ${transactionId} has been permanently deleted.`);\n  } catch (error) {\n    console.error(`Error deleting transaction ${transactionId}:`, error);\n  }\n};\n\nexport const getMostRecentTransaction = async (startTime) => {\n  try {\n    const transactionsRef = getFirebaseRef(startTime);\n    const recentQuery = query(transactionsRef, orderByChild(\"timestamp\"), limitToLast(1));\n\n\n    const snapshot = await get(recentQuery);\n\n\n    if (snapshot && snapshot.exists()) {\n      const data = snapshot.val();\n      const [key, value] = Object.entries(data)[0];\n      return { success: true, transaction: { id: key, ...value } };\n    } else {\n      return { success: false, message: \"No transactions found.\" };\n    }\n  } catch (error) {\n    console.error(\"Error fetching the most recent transaction:\", error);\n    return { success: false, error };\n  }\n};\n\nexport const updateTransaction = async (startTime, transactionId, updatedTransaction) => {\n  try {\n    let transactionRef = \"\";\n\n    if (ENV_POINT_TO == \"prod\") {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    } else if (window.location.hostname === 'localhost') {\n      transactionRef = ref(db, `transactions_local_${startTime}/${transactionId}`);\n    } else {\n      transactionRef = ref(db, `transactions_${startTime}/${transactionId}`);\n    }\n\n    // Remove any properties we don't want to update in Firebase\n    const { deleted, ...dataToUpdate } = updatedTransaction;\n\n    await update(transactionRef, dataToUpdate);\n    console.log(`Transaction ${transactionId} updated successfully.`);\n    \n    return { success: true };\n  } catch (error) {\n    console.error(`Error updating transaction ${transactionId}:`, error);\n    throw error; // Rethrow so the UI can handle it\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}